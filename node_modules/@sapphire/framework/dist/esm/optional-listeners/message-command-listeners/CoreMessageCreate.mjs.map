{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CoreMessageCreate.ts"],"names":[],"mappings":";;;;AAIO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAsC,CAAA;AAAA,EAChE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAA,MAAA,CAAO,eAAe,CAAA;AAAA;AAC/C,EAEO,IAAI,OAAkB,EAAA;AAE5B,IAAA,IAAI,OAAQ,CAAA,MAAA,CAAO,GAAO,IAAA,OAAA,CAAQ,SAAW,EAAA;AAG7C,IAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,kBAAkB,OAAO,CAAA;AAAA;AAE7D,CAAA;AAZwE,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAjE,IAAM,YAAN,GAAA","file":"CoreMessageCreate.mjs","sourcesContent":["import type { Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCreate> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCreate });\n\t}\n\n\tpublic run(message: Message) {\n\t\t// Stop bots and webhooks from running commands.\n\t\tif (message.author.bot || message.webhookId) return;\n\n\t\t// Run the message parser.\n\t\tthis.container.client.emit(Events.PreMessageParsed, message);\n\t}\n}\n"]}