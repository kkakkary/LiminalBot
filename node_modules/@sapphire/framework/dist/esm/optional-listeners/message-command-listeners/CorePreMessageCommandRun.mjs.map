{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageCommandRun.ts"],"names":[],"mappings":";;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAA6C,CAAA;AAAA,EACvE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAA,MAAA,CAAO,sBAAsB,CAAA;AAAA;AACtD,EAEA,MAAa,IAAI,OAAsC,EAAA;AACtD,IAAM,MAAA,EAAE,OAAS,EAAA,OAAA,EAAY,GAAA,OAAA;AAG7B,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,GAAI,CAAA,eAAe,CAAE,CAAA,UAAA,CAAW,OAAS,EAAA,OAAA,EAAS,OAAc,CAAA;AACjH,IAAI,IAAA,YAAA,CAAa,OAAS,EAAA;AACzB,MAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,MAAA,CAAO,sBAAsB,YAAa,CAAA,SAAA,IAAa,OAAO,CAAA;AAClF,MAAA;AAAA;AAID,IAAA,MAAM,cAAc,MAAM,OAAA,CAAQ,cAAc,UAAW,CAAA,OAAA,EAAS,SAAS,OAAc,CAAA;AAC3F,IAAI,IAAA,WAAA,CAAY,OAAS,EAAA;AACxB,MAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,MAAA,CAAO,sBAAsB,WAAY,CAAA,SAAA,IAAa,OAAO,CAAA;AACjF,MAAA;AAAA;AAGD,IAAA,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,MAAO,CAAA,sBAAA,EAAwB,OAAO,CAAA;AAAA;AAE5D,CAAA;AAxB+E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAxE,IAAM,YAAN,GAAA","file":"CorePreMessageCommandRun.mjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type PreMessageCommandRunPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageCommandRun });\n\t}\n\n\tpublic async run(payload: PreMessageCommandRunPayload) {\n\t\tconst { message, command } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').messageRun(message, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.messageRun(message, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tmessage.client.emit(Events.MessageCommandAccepted, payload);\n\t}\n}\n"]}