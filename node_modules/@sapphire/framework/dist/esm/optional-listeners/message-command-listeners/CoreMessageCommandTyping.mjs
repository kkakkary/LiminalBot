import { __name } from '../../chunk-PAWJFY3S.mjs';
import { isStageChannel } from '@sapphire/discord.js-utilities';
import { ChannelType } from 'discord.js';
import { Listener } from '../../lib/structures/Listener.mjs';
import { Events } from '../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.MessageCommandRun });
    this.enabled = this.container.client.options.typing ?? false;
  }
  async run(message, command, payload) {
    if (!command.typing || isStageChannel(message.channel)) {
      return;
    }
    if (message.channel.type === ChannelType.GroupDM) {
      return;
    }
    try {
      await message.channel.sendTyping();
    } catch (error) {
      message.client.emit(Events.MessageCommandTypingError, error, { ...payload, command, message });
    }
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;

export { CoreListener };
//# sourceMappingURL=CoreMessageCommandTyping.mjs.map
//# sourceMappingURL=CoreMessageCommandTyping.mjs.map