import { __name } from '../chunk-PAWJFY3S.mjs';
import { container } from '@sapphire/pieces';
import { resolveMessage } from '../lib/resolvers/message.mjs';
import { Argument } from '../lib/structures/Argument.mjs';

var _CoreArgument = class _CoreArgument extends Argument {
  constructor(context) {
    super(context, { name: "message" });
  }
  async run(parameter, context) {
    const channel = context.channel ?? context.message.channel;
    const resolved = await resolveMessage(parameter, {
      messageOrInteraction: context.message,
      channel: context.channel,
      scan: context.scan ?? false
    });
    return resolved.mapErrInto(
      (identifier) => this.error({
        parameter,
        identifier,
        message: "The given argument did not resolve to a message.",
        context: { ...context, channel }
      })
    );
  }
};
__name(_CoreArgument, "CoreArgument");
var CoreArgument = _CoreArgument;
void container.stores.loadPiece({
  name: "message",
  piece: CoreArgument,
  store: "arguments"
});

export { CoreArgument };
//# sourceMappingURL=CoreMessage.mjs.map
//# sourceMappingURL=CoreMessage.mjs.map