{"version":3,"sources":["../../../src/arguments/CoreHyperlink.ts"],"names":[],"mappings":";;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAc,CAAA;AAAA,EACxC,YAAY,OAAiC,EAAA;AACnD,IAAM,KAAA,CAAA,OAAA,EAAS,EAAE,IAAM,EAAA,WAAA,EAAa,SAAS,CAAC,KAAK,GAAG,CAAA;AAAA;AACvD,EAEO,GAAA,CAAI,WAAmB,OAAiD,EAAA;AAC9E,IAAM,MAAA,QAAA,GAAW,iBAAiB,SAAS,CAAA;AAC3C,IAAA,OAAO,QAAS,CAAA,UAAA;AAAA,MAAW,CAAC,UAC3B,KAAA,IAAA,CAAK,KAAM,CAAA;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAS,EAAA,8CAAA;AAAA,QACT;AAAA,OACA;AAAA,KACF;AAAA;AAEF,CAAA;AAhBgD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAzC,IAAM,YAAN,GAAA;AAkBP,KAAK,SAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreHyperlink.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { URL } from 'node:url';\nimport { resolveHyperlink } from '../lib/resolvers/hyperlink';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<URL> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'hyperlink', aliases: ['url'] });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<URL> {\n\t\tconst resolved = resolveHyperlink(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to a valid URL.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'hyperlink',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}