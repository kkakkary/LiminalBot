{"version":3,"sources":["../../src/index.ts"],"names":["ClientPermissions","Cooldown","DMOnly","Enabled","RunIn","GuildNewsOnly","GuildNewsThreadOnly","GuildOnly","GuildPrivateThreadOnly","GuildPublicThreadOnly","GuildTextOnly","GuildVoiceOnly","GuildThreadOnly","NSFW","UserPermissions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAM,4BAA+B,GAAA;AAAA,EACpC,OAAA;AAAA,EACA,kCAAA;AAAA,EACA,kBAAA;AAAA,EACA,uBAAA;AAAA,EACA,kBAAA;AAAA,EACA,kCAAA;AAAA,EACA,uBAAA;AAAA,EACA,IAAI,UAA8D,GAAA;AACjE,IAAO,OAAA,UAAA;AAAA;AAET;AA2EO,IAAM,iBAAoB,GAAA;AAAA,qBAChCA,kBAAA;AAAA,YACAC,kBAAA;AAAA;AAAA,UAEAC,kBAAA;AAAA,WACAC,kBAAA;AAAA,SACAC,kBAAA;AAAA;AAAA,iBAEAC,kBAAA;AAAA;AAAA,uBAEAC,kBAAA;AAAA;AAAA,aAEAC,kBAAA;AAAA;AAAA,0BAEAC,kBAAA;AAAA;AAAA,yBAEAC,kBAAA;AAAA;AAAA,iBAEAC,kBAAA;AAAA;AAAA,kBAEAC,kBAAA;AAAA;AAAA,mBAEAC,kBAAA;AAAA,QACAC,kBAAA;AAAA,mBACAC;AACD;AAeO,IAAM,OAAkB,GAAA","file":"index.mjs","sourcesContent":["import {\n\tacquire,\n\tgetBulkOverwriteRetries,\n\tgetDefaultBehaviorWhenNotIdentical,\n\tgetDefaultGuildIds,\n\tregistries,\n\tsetBulkOverwriteRetries,\n\tsetDefaultBehaviorWhenNotIdentical,\n\tsetDefaultGuildIds\n} from './lib/utils/application-commands/ApplicationCommandRegistries';\nimport type { ApplicationCommandRegistry } from './lib/utils/application-commands/ApplicationCommandRegistry';\nimport { CorePrecondition as ClientPermissions, type PermissionPreconditionContext } from './preconditions/ClientPermissions';\nimport { CorePrecondition as Cooldown, type CooldownPreconditionContext } from './preconditions/Cooldown';\nimport { CorePrecondition as DMOnly } from './preconditions/DMOnly';\nimport { CorePrecondition as Enabled } from './preconditions/Enabled';\nimport { CorePrecondition as GuildNewsOnly } from './preconditions/GuildNewsOnly';\nimport { CorePrecondition as GuildNewsThreadOnly } from './preconditions/GuildNewsThreadOnly';\nimport { CorePrecondition as GuildOnly } from './preconditions/GuildOnly';\nimport { CorePrecondition as GuildPrivateThreadOnly } from './preconditions/GuildPrivateThreadOnly';\nimport { CorePrecondition as GuildPublicThreadOnly } from './preconditions/GuildPublicThreadOnly';\nimport { CorePrecondition as GuildTextOnly } from './preconditions/GuildTextOnly';\nimport { CorePrecondition as GuildThreadOnly } from './preconditions/GuildThreadOnly';\nimport { CorePrecondition as GuildVoiceOnly } from './preconditions/GuildVoiceOnly';\nimport { CorePrecondition as NSFW } from './preconditions/NSFW';\nimport { CorePrecondition as RunIn } from './preconditions/RunIn';\nimport { CorePrecondition as UserPermissions } from './preconditions/UserPermissions';\n\nconst ApplicationCommandRegistries = {\n\tacquire,\n\tsetDefaultBehaviorWhenNotIdentical,\n\tsetDefaultGuildIds,\n\tsetBulkOverwriteRetries,\n\tgetDefaultGuildIds,\n\tgetDefaultBehaviorWhenNotIdentical,\n\tgetBulkOverwriteRetries,\n\tget registries(): ReadonlyMap<string, ApplicationCommandRegistry> {\n\t\treturn registries;\n\t}\n};\n\nexport {\n\tAliasPiece,\n\tAliasStore,\n\tcontainer,\n\tLoaderError,\n\tMissingExportsError,\n\tPiece,\n\tStore,\n\tStoreRegistry,\n\ttype AliasPieceJSON,\n\ttype AliasPieceOptions,\n\ttype Container,\n\ttype LoaderPieceContext,\n\ttype PieceContext,\n\ttype PieceJSON,\n\ttype PieceLocationJSON,\n\ttype PieceOf,\n\ttype PieceOptions,\n\ttype StoreManagerManuallyRegisteredPiece,\n\ttype StoreManuallyRegisteredPiece,\n\ttype StoreOf,\n\ttype StoreOptions,\n\ttype StoreRegistryEntries,\n\ttype StoreRegistryKey,\n\ttype StoreRegistryValue\n} from '@sapphire/pieces';\nexport * from '@sapphire/result';\nexport type { Awaitable } from '@sapphire/utilities';\nexport * from './lib/errors/ArgumentError';\nexport * from './lib/errors/Identifiers';\nexport * from './lib/errors/PreconditionError';\nexport * from './lib/errors/UserError';\nexport * from './lib/parsers/Args';\nexport * from './lib/plugins/Plugin';\nexport * from './lib/plugins/PluginManager';\nexport * from './lib/plugins/symbols';\nexport * as PreconditionResolvers from './lib/precondition-resolvers/index';\nexport type { EmojiObject } from './lib/resolvers/emoji';\nexport * as Resolvers from './lib/resolvers/index';\nexport type { MessageResolverOptions } from './lib/resolvers/message';\nexport * from './lib/SapphireClient';\nexport * from './lib/structures/Argument';\nexport * from './lib/structures/ArgumentStore';\nexport * from './lib/structures/Command';\nexport * from './lib/structures/CommandStore';\nexport * from './lib/structures/InteractionHandler';\nexport * from './lib/structures/InteractionHandlerStore';\nexport * from './lib/structures/Listener';\nexport * from './lib/structures/ListenerLoaderStrategy';\nexport * from './lib/structures/ListenerStore';\nexport * from './lib/structures/Precondition';\nexport * from './lib/structures/PreconditionStore';\nexport * from './lib/types/ArgumentContexts';\nexport * from './lib/types/CommandTypes';\nexport * from './lib/types/Enums';\nexport * from './lib/types/Events';\nexport {\n\tApplicationCommandRegistry,\n\ttype ApplicationCommandRegistryRegisterOptions\n} from './lib/utils/application-commands/ApplicationCommandRegistry';\nexport * from './lib/utils/logger/ILogger';\nexport * from './lib/utils/logger/Logger';\nexport * from './lib/utils/preconditions/conditions/IPreconditionCondition';\nexport * from './lib/utils/preconditions/conditions/PreconditionConditionAnd';\nexport * from './lib/utils/preconditions/conditions/PreconditionConditionOr';\nexport * from './lib/utils/preconditions/containers/ClientPermissionsPrecondition';\nexport * from './lib/utils/preconditions/containers/UserPermissionsPrecondition';\nexport * from './lib/utils/preconditions/IPreconditionContainer';\nexport * from './lib/utils/preconditions/PreconditionContainerArray';\nexport * from './lib/utils/preconditions/PreconditionContainerSingle';\nexport { ApplicationCommandRegistries };\n\n/* eslint-disable deprecation/deprecation */\nexport const CorePreconditions = {\n\tClientPermissions,\n\tCooldown,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tDMOnly,\n\tEnabled,\n\tRunIn,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildNewsOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildNewsThreadOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildPrivateThreadOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildPublicThreadOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildTextOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildVoiceOnly,\n\t/** @deprecated Use {@link RunIn} instead. */\n\tGuildThreadOnly,\n\tNSFW,\n\tUserPermissions\n};\n/* eslint-enable deprecation/deprecation */\n\nexport namespace CorePreconditions {\n\texport type UserPermissionsPreconditionContext = PermissionPreconditionContext;\n\texport type CooldownContext = CooldownPreconditionContext;\n}\n\n/**\n * The [@sapphire/framework](https://github.com/sapphiredev/framework) version that you are currently using.\n * An example use of this is showing it of in a bot information command.\n *\n * Note to Sapphire developers: This needs to explicitly be `string` so it is not typed as the string that gets replaced by esbuild\n */\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '5.3.6';\n"]}