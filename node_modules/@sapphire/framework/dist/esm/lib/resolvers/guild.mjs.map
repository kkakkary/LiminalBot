{"version":3,"sources":["../../../../src/lib/resolvers/guild.ts"],"names":[],"mappings":";;;;;;AAMA,eAAsB,aAAa,SAA2E,EAAA;AAC7G,EAAA,MAAM,OAAU,GAAA,cAAA,CAAe,IAAK,CAAA,SAAS,GAAG,MAAQ,EAAA,EAAA;AACxD,EAAA,MAAM,KAAQ,GAAA,OAAA,GAAU,MAAM,SAAA,CAAU,MAAO,CAAA,MAAA,CAAO,KAAM,CAAA,OAAO,CAAE,CAAA,KAAA,CAAM,MAAM,IAAI,CAAI,GAAA,IAAA;AAEzF,EAAA,IAAI,KAAO,EAAA;AACV,IAAO,OAAA,MAAA,CAAO,GAAG,KAAK,CAAA;AAAA;AAGvB,EAAO,OAAA,MAAA,CAAO,GAAI,CAAA,WAAA,CAAY,kBAAkB,CAAA;AACjD;AATsB,MAAA,CAAA,YAAA,EAAA,cAAA,CAAA","file":"guild.mjs","sourcesContent":["import { SnowflakeRegex } from '@sapphire/discord-utilities';\nimport { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { Guild } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveGuild(parameter: string): Promise<Result<Guild, Identifiers.ArgumentGuildError>> {\n\tconst guildId = SnowflakeRegex.exec(parameter)?.groups?.id;\n\tconst guild = guildId ? await container.client.guilds.fetch(guildId).catch(() => null) : null;\n\n\tif (guild) {\n\t\treturn Result.ok(guild);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentGuildError);\n}\n"]}