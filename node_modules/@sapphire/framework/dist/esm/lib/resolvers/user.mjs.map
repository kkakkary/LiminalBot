{"version":3,"sources":["../../../../src/lib/resolvers/user.ts"],"names":[],"mappings":";;;;;;AAMA,eAAsB,YAAY,SAAyE,EAAA;AAC1G,EAAA,MAAM,SAAS,wBAAyB,CAAA,IAAA,CAAK,SAAS,CAAK,IAAA,cAAA,CAAe,KAAK,SAAS,CAAA;AACxF,EAAA,MAAM,IAAO,GAAA,MAAA,GAAS,MAAM,SAAA,CAAU,OAAO,KAAM,CAAA,KAAA,CAAM,MAAO,CAAA,CAAC,CAAc,CAAA,CAAE,KAAM,CAAA,MAAM,IAAI,CAAI,GAAA,IAAA;AAErG,EAAA,IAAI,IAAM,EAAA;AACT,IAAO,OAAA,MAAA,CAAO,GAAG,IAAI,CAAA;AAAA;AAGtB,EAAO,OAAA,MAAA,CAAO,GAAI,CAAA,WAAA,CAAY,iBAAiB,CAAA;AAChD;AATsB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA","file":"user.mjs","sourcesContent":["import { SnowflakeRegex, UserOrMemberMentionRegex } from '@sapphire/discord-utilities';\nimport { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { Snowflake, User } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveUser(parameter: string): Promise<Result<User, Identifiers.ArgumentUserError>> {\n\tconst userId = UserOrMemberMentionRegex.exec(parameter) ?? SnowflakeRegex.exec(parameter);\n\tconst user = userId ? await container.client.users.fetch(userId[1] as Snowflake).catch(() => null) : null;\n\n\tif (user) {\n\t\treturn Result.ok(user);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentUserError);\n}\n"]}