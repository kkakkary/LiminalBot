{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageParser.ts"],"names":["Listener","Events","PermissionsBitField","PermissionFlagsBits","ChannelType","isDMChannel"],"mappings":"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","file":"CorePreMessageParser.cjs","sourcesContent":["import { isDMChannel } from '@sapphire/discord.js-utilities';\nimport { ChannelType, PermissionFlagsBits, PermissionsBitField, type Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageParsed> {\n\tprivate readonly requiredPermissions = new PermissionsBitField([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]).freeze();\n\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageParsed });\n\t}\n\n\tpublic async run(message: Message) {\n\t\t// If the bot cannot run the command due to lack of permissions, return.\n\t\tconst canRun = await this.canRunInChannel(message);\n\t\tif (!canRun) return;\n\n\t\tlet prefix: string | null | RegExp = null;\n\t\tconst mentionPrefix = this.getMentionPrefix(message);\n\t\tconst { client } = this.container;\n\t\tconst { regexPrefix } = client.options;\n\n\t\tif (mentionPrefix) {\n\t\t\tif (message.content.length === mentionPrefix.length) {\n\t\t\t\tclient.emit(Events.MentionPrefixOnly, message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprefix = mentionPrefix;\n\t\t} else if (regexPrefix?.test(message.content)) {\n\t\t\tprefix = regexPrefix;\n\t\t} else {\n\t\t\tconst prefixes = await client.fetchPrefix(message);\n\t\t\tconst parsed = this.getPrefix(message.content, prefixes);\n\t\t\tif (parsed !== null) prefix = parsed;\n\t\t}\n\n\t\tif (prefix === null) client.emit(Events.NonPrefixedMessage, message);\n\t\telse client.emit(Events.PrefixedMessage, message, prefix);\n\t}\n\n\tprivate async canRunInChannel(message: Message): Promise<boolean> {\n\t\tif (message.channel.type === ChannelType.GroupDM) return false;\n\t\tif (isDMChannel(message.channel)) return true;\n\n\t\tconst me = await message.guild?.members.fetchMe();\n\t\tif (!me) return false;\n\n\t\tconst { channel } = message;\n\t\tconst permissionsFor = channel.permissionsFor(me);\n\t\tif (!permissionsFor) return false;\n\n\t\treturn permissionsFor.has(this.requiredPermissions, true);\n\t}\n\n\tprivate getMentionPrefix(message: Message): string | null {\n\t\tif (this.container.client.disableMentionPrefix) return null;\n\t\t// If the content is shorter than 20 characters, or does not start with `<@` then skip early:\n\t\tif (message.content.length < 20 || !message.content.startsWith('<@')) return null;\n\n\t\t// Calculate the offset and the ID that is being provided\n\t\tconst [offset, id] =\n\t\t\tmessage.content[2] === '&'\n\t\t\t\t? [3, message.guild?.roles.botRoleFor(this.container.client.id!)?.id]\n\t\t\t\t: [message.content[2] === '!' ? 3 : 2, this.container.client.id];\n\n\t\tif (!id) return null;\n\n\t\tconst offsetWithId = offset + id.length;\n\n\t\t// If the mention doesn't end with `>`, skip early:\n\t\tif (message.content[offsetWithId] !== '>') return null;\n\n\t\t// Check whether or not the ID is the same as the managed role ID:\n\t\tconst mentionId = message.content.substring(offset, offsetWithId);\n\t\tif (mentionId === id) return message.content.substring(0, offsetWithId + 1);\n\n\t\treturn null;\n\t}\n\n\tprivate getPrefix(content: string, prefixes: readonly string[] | string | null): string | null {\n\t\tif (prefixes === null) return null;\n\t\tconst { caseInsensitivePrefixes } = this.container.client.options;\n\n\t\tif (caseInsensitivePrefixes) content = content.toLowerCase();\n\n\t\tif (typeof prefixes === 'string') {\n\t\t\treturn content.startsWith(caseInsensitivePrefixes ? prefixes.toLowerCase() : prefixes) ? prefixes : null;\n\t\t}\n\n\t\treturn prefixes.find((prefix) => content.startsWith(caseInsensitivePrefixes ? prefix.toLowerCase() : prefix)) ?? null;\n\t}\n}\n"]}