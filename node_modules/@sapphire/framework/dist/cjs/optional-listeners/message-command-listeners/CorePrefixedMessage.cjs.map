{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePrefixedMessage.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAwC,CAAA;AAAA,EAClE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,iBAAiB,CAAA;AAAA;AACjD,EAEO,GAAA,CAAI,SAAkB,MAAyB,EAAA;AACrD,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,SAAA;AAEhC,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,CAAQ,SAAS,MAAM,CAAA;AACnE,IAAA,MAAM,aAAa,OAAQ,CAAA,OAAA,CAAQ,MAAM,aAAc,CAAA,MAAM,EAAE,IAAK,EAAA;AAIpE,IAAM,MAAA,UAAA,GAAa,UAAW,CAAA,OAAA,CAAQ,GAAG,CAAA;AACzC,IAAA,MAAM,cAAc,UAAe,KAAA,EAAA,GAAK,aAAa,UAAW,CAAA,KAAA,CAAM,GAAG,UAAU,CAAA;AACnF,IAAI,IAAA,WAAA,CAAY,WAAW,CAAG,EAAA;AAC7B,MAAA,MAAA,CAAO,KAAKA,iBAAO,CAAA,yBAAA,EAA2B,EAAE,OAAS,EAAA,MAAA,EAAQ,eAAe,CAAA;AAChF,MAAA;AAAA;AAID,IAAA,MAAM,OAAU,GAAA,MAAA,CAAO,GAAI,CAAA,UAAU,CAAE,CAAA,GAAA,CAAI,MAAO,CAAA,OAAA,CAAQ,uBAA0B,GAAA,WAAA,CAAY,WAAY,EAAA,GAAI,WAAW,CAAA;AAC3H,IAAA,IAAI,CAAC,OAAS,EAAA;AACb,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,qBAAuB,EAAA,EAAE,SAAS,MAAQ,EAAA,WAAA,EAAa,eAAe,CAAA;AACzF,MAAA;AAAA;AAID,IAAI,IAAA,CAAC,QAAQ,UAAY,EAAA;AACxB,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,uCAAyC,EAAA,EAAE,SAAS,MAAQ,EAAA,aAAA,EAAe,SAAS,CAAA;AACvG,MAAA;AAAA;AAID,IAAM,MAAA,UAAA,GAAa,eAAe,EAAK,GAAA,EAAA,GAAK,WAAW,SAAU,CAAA,UAAA,GAAa,CAAC,CAAA,CAAE,IAAK,EAAA;AACtF,IAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,oBAAsB,EAAA;AAAA,MACxC,OAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAS,EAAA,EAAE,WAAa,EAAA,aAAA,EAAe,MAAO;AAAA,KAC9C,CAAA;AAAA;AACF,EAEQ,gBAAA,CAAiB,SAAiB,MAAiC,EAAA;AAC1E,IAAO,OAAA,OAAO,WAAW,QAAW,GAAA,MAAA,GAAS,OAAO,IAAK,CAAA,OAAO,EAAG,CAAC,CAAA;AAAA;AAEtE,CAAA;AA9C0E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAnE,IAAM,YAAN,GAAA","file":"CorePrefixedMessage.cjs","sourcesContent":["import type { Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport type { MessageCommand } from '../../lib/types/CommandTypes';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PrefixedMessage> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PrefixedMessage });\n\t}\n\n\tpublic run(message: Message, prefix: string | RegExp) {\n\t\tconst { client, stores } = this.container;\n\t\t// Retrieve the command name and validate:\n\t\tconst commandPrefix = this.getCommandPrefix(message.content, prefix);\n\t\tconst prefixLess = message.content.slice(commandPrefix.length).trim();\n\n\t\t// The character that separates the command name from the arguments, this will return -1 when '[p]command' is\n\t\t// passed, and a non -1 value when '[p]command arg' is passed instead.\n\t\tconst spaceIndex = prefixLess.indexOf(' ');\n\t\tconst commandName = spaceIndex === -1 ? prefixLess : prefixLess.slice(0, spaceIndex);\n\t\tif (commandName.length === 0) {\n\t\t\tclient.emit(Events.UnknownMessageCommandName, { message, prefix, commandPrefix });\n\t\t\treturn;\n\t\t}\n\n\t\t// Retrieve the command and validate:\n\t\tconst command = stores.get('commands').get(client.options.caseInsensitiveCommands ? commandName.toLowerCase() : commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownMessageCommand, { message, prefix, commandName, commandPrefix });\n\t\t\treturn;\n\t\t}\n\n\t\t// If the command exists but is missing a message handler, emit a different event (maybe an application command variant exists)\n\t\tif (!command.messageRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveMessageCommandHandler, { message, prefix, commandPrefix, command });\n\t\t\treturn;\n\t\t}\n\n\t\t// Run the last stage before running the command:\n\t\tconst parameters = spaceIndex === -1 ? '' : prefixLess.substring(spaceIndex + 1).trim();\n\t\tclient.emit(Events.PreMessageCommandRun, {\n\t\t\tmessage,\n\t\t\tcommand: command as MessageCommand,\n\t\t\tparameters,\n\t\t\tcontext: { commandName, commandPrefix, prefix }\n\t\t});\n\t}\n\n\tprivate getCommandPrefix(content: string, prefix: string | RegExp): string {\n\t\treturn typeof prefix === 'string' ? prefix : prefix.exec(content)![0];\n\t}\n}\n"]}