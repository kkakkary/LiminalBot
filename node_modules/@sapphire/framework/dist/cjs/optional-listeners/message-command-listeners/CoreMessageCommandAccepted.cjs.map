{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CoreMessageCommandAccepted.ts"],"names":["Listener","Events","result","Result","stopwatch","Stopwatch"],"mappings":";;;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAA+C,CAAA;AAAA,EACzE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,wBAAwB,CAAA;AAAA;AACxD,EAEA,MAAa,IAAI,OAAwC,EAAA;AACxD,IAAA,MAAM,EAAE,OAAA,EAAS,OAAS,EAAA,UAAA,EAAY,SAAY,GAAA,OAAA;AAClD,IAAA,MAAM,OAAO,MAAM,OAAA,CAAQ,eAAgB,CAAA,OAAA,EAAS,YAAY,OAAO,CAAA;AAEvE,IAAA,MAAMC,QAAS,GAAA,MAAMC,aAAO,CAAA,SAAA,CAAU,YAAY;AACjD,MAAQ,OAAA,CAAA,MAAA,CAAO,IAAK,CAAAF,iBAAA,CAAO,iBAAmB,EAAA,OAAA,EAAS,SAAS,EAAE,GAAG,OAAS,EAAA,IAAA,EAAM,CAAA;AAEpF,MAAM,MAAAG,WAAA,GAAY,IAAIC,mBAAU,EAAA;AAChC,MAAA,MAAMH,UAAS,MAAM,OAAA,CAAQ,UAAW,CAAA,OAAA,EAAS,MAAM,OAAO,CAAA;AAC9D,MAAA,MAAM,EAAE,QAAA,EAAa,GAAAE,WAAA,CAAU,IAAK,EAAA;AAEpC,MAAQ,OAAA,CAAA,MAAA,CAAO,IAAK,CAAAH,iBAAA,CAAO,qBAAuB,EAAA,EAAE,GAAG,OAAA,EAAS,IAAM,EAAA,MAAA,EAAAC,OAAQ,EAAA,QAAA,EAAU,CAAA;AAExF,MAAO,OAAA,QAAA;AAAA,KACP,CAAA;AAED,IAAAA,QAAA,CAAO,WAAW,CAAC,KAAA,KAAU,OAAQ,CAAA,MAAA,CAAO,KAAKD,iBAAO,CAAA,mBAAA,EAAqB,KAAO,EAAA,EAAE,GAAG,OAAS,EAAA,IAAA,EAAM,QAAU,EAAA,EAAA,EAAI,CAAC,CAAA;AAEvH,IAAA,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAKA,iBAAO,CAAA,oBAAA,EAAsB,SAAS,OAAS,EAAA;AAAA,MAClE,GAAG,OAAA;AAAA,MACH,IAAA;AAAA,MACA,OAAA,EAASC,SAAO,IAAK,EAAA;AAAA,MACrB,QAAA,EAAUA,QAAO,CAAA,QAAA,CAAS,EAAE;AAAA,KAC5B,CAAA;AAAA;AAEH,CAAA;AA9BiF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1E,IAAM,YAAN,GAAA","file":"CoreMessageCommandAccepted.cjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events, type MessageCommandAcceptedPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCommandAccepted });\n\t}\n\n\tpublic async run(payload: MessageCommandAcceptedPayload) {\n\t\tconst { message, command, parameters, context } = payload;\n\t\tconst args = await command.messagePreParse(message, parameters, context);\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tmessage.client.emit(Events.MessageCommandRun, message, command, { ...payload, args });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.messageRun(message, args, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tmessage.client.emit(Events.MessageCommandSuccess, { ...payload, args, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => message.client.emit(Events.MessageCommandError, error, { ...payload, args, duration: -1 }));\n\n\t\tmessage.client.emit(Events.MessageCommandFinish, message, command, {\n\t\t\t...payload,\n\t\t\targs,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n"]}