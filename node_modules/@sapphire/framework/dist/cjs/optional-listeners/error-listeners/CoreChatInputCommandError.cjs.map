{"version":3,"sources":["../../../../src/optional-listeners/error-listeners/CoreChatInputCommandError.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAA8C,CAAA;AAAA,EACxE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,uBAAuB,CAAA;AAAA;AACvD,EAEO,GAAA,CAAI,OAAgB,OAAuC,EAAA;AACjE,IAAA,MAAM,EAAE,IAAA,EAAM,QAAS,EAAA,GAAI,OAAQ,CAAA,OAAA;AACnC,IAAK,IAAA,CAAA,SAAA,CAAU,OAAO,KAAM,CAAA,CAAA,yCAAA,EAA4C,IAAI,CAAc,WAAA,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AAEnH,CAAA;AATgF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAzE,IAAM,YAAN,GAAA","file":"CoreChatInputCommandError.cjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type ChatInputCommandErrorPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ChatInputCommandError> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ChatInputCommandError });\n\t}\n\n\tpublic run(error: unknown, context: ChatInputCommandErrorPayload) {\n\t\tconst { name, location } = context.command;\n\t\tthis.container.logger.error(`Encountered error on chat input command \"${name}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}