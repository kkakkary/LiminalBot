{"version":3,"sources":["../../../../src/optional-listeners/error-listeners/CoreListenerError.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAsC,CAAA;AAAA,EAChE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,eAAe,CAAA;AAAA;AAC/C,EAEO,GAAA,CAAI,OAAgB,OAA+B,EAAA;AACzD,IAAA,MAAM,EAAE,IAAA,EAAM,KAAO,EAAA,QAAA,KAAa,OAAQ,CAAA,KAAA;AAC1C,IAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,KAAM,CAAA,CAAA,qCAAA,EAAwC,IAAI,CAAA,aAAA,EAAgB,MAAO,CAAA,KAAK,CAAC,CAAA,WAAA,EAAc,QAAS,CAAA,IAAI,KAAK,KAAK,CAAA;AAAA;AAE5I,CAAA;AATwE,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAjE,IAAM,YAAN,GAAA","file":"CoreListenerError.cjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type ListenerErrorPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ListenerError> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ListenerError });\n\t}\n\n\tpublic run(error: unknown, context: ListenerErrorPayload) {\n\t\tconst { name, event, location } = context.piece;\n\t\tthis.container.logger.error(`Encountered error on event listener \"${name}\" for event \"${String(event)}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}