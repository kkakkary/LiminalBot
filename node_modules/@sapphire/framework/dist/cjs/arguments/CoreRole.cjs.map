{"version":3,"sources":["../../../src/arguments/CoreRole.ts"],"names":["Argument","Identifiers","resolveRole","container"],"mappings":";;;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAe,CAAA;AAAA,EACzC,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,CAAA;AAAA;AAChC,EAEA,MAAa,GAAI,CAAA,SAAA,EAAmB,OAAuD,EAAA;AAC1F,IAAM,MAAA,EAAE,KAAM,EAAA,GAAI,OAAQ,CAAA,OAAA;AAC1B,IAAA,IAAI,CAAC,KAAO,EAAA;AACX,MAAA,OAAO,KAAK,KAAM,CAAA;AAAA,QACjB,SAAA;AAAA,QACA,YAAYC,2BAAY,CAAA,wBAAA;AAAA,QACxB,OAAS,EAAA,4CAAA;AAAA,QACT;AAAA,OACA,CAAA;AAAA;AAGF,IAAA,MAAM,QAAW,GAAA,MAAMC,oBAAY,CAAA,SAAA,EAAW,KAAK,CAAA;AACnD,IAAA,OAAO,QAAS,CAAA,UAAA;AAAA,MAAW,CAAC,UAC3B,KAAA,IAAA,CAAK,KAAM,CAAA;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAS,EAAA,+CAAA;AAAA,QACT,OAAS,EAAA,EAAE,GAAG,OAAA,EAAS,KAAM;AAAA,OAC7B;AAAA,KACF;AAAA;AAEF,CAAA;AA1BiD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1C,IAAM,YAAN,GAAA;AA4BP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreRole.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { Role } from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveRole } from '../lib/resolvers/role';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<Role> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'role' });\n\t}\n\n\tpublic async run(parameter: string, context: Argument.Context): Argument.AsyncResult<Role> {\n\t\tconst { guild } = context.message;\n\t\tif (!guild) {\n\t\t\treturn this.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier: Identifiers.ArgumentRoleMissingGuild,\n\t\t\t\tmessage: 'This command can only be used in a server.',\n\t\t\t\tcontext\n\t\t\t});\n\t\t}\n\n\t\tconst resolved = await resolveRole(parameter, guild);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a role.',\n\t\t\t\tcontext: { ...context, guild }\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'role',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}