{"version":3,"sources":["../../../src/arguments/CoreUser.ts"],"names":["Argument","resolveUser","container"],"mappings":";;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAe,CAAA;AAAA,EACzC,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,CAAA;AAAA;AAChC,EAEA,MAAa,GAAI,CAAA,SAAA,EAAmB,OAAuD,EAAA;AAC1F,IAAM,MAAA,QAAA,GAAW,MAAMC,oBAAA,CAAY,SAAS,CAAA;AAC5C,IAAA,OAAO,QAAS,CAAA,UAAA;AAAA,MAAW,CAAC,UAC3B,KAAA,IAAA,CAAK,KAAM,CAAA;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAS,EAAA,uDAAA;AAAA,QACT;AAAA,OACA;AAAA,KACF;AAAA;AAEF,CAAA;AAhBiD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1C,IAAM,YAAN,GAAA;AAkBP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreUser.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { User } from 'discord.js';\nimport { resolveUser } from '../lib/resolvers/user';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<User> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'user' });\n\t}\n\n\tpublic async run(parameter: string, context: Argument.Context): Argument.AsyncResult<User> {\n\t\tconst resolved = await resolveUser(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a Discord user.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'user',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}