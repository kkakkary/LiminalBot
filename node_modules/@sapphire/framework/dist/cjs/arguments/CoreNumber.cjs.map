{"version":3,"sources":["../../../src/arguments/CoreNumber.ts"],"names":["Argument","Identifiers","resolveNumber","container"],"mappings":";;;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAiB,CAAA;AAAA,EAO3C,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,IAAM,EAAA,QAAA,EAAU,CAAA;AAPlC,IAAA,IAAA,CAAiB,QAAW,GAAA;AAAA,MAC3B,CAACC,4BAAY,sBAAsB,GAAG,CAAC,EAAE,OAAA,EAAgC,KAAA,CAAA,sCAAA,EAAyC,OAAO,CAAA,CAAA,CAAA;AAAA,MACzH,CAACA,4BAAY,sBAAsB,GAAG,CAAC,EAAE,OAAA,EAAgC,KAAA,CAAA,mCAAA,EAAsC,OAAO,CAAA,CAAA,CAAA;AAAA,MACtH,CAACA,2BAAA,CAAY,mBAAmB,GAAG,MAAM;AAAA,KAC1C;AAAA;AAIA,EAEO,GAAA,CAAI,WAAmB,OAAoD,EAAA;AACjF,IAAM,MAAA,QAAA,GAAWC,wBAAc,CAAA,SAAA,EAAW,EAAE,OAAA,EAAS,QAAQ,OAAS,EAAA,OAAA,EAAS,OAAQ,CAAA,OAAA,EAAS,CAAA;AAChG,IAAA,OAAO,QAAS,CAAA,UAAA;AAAA,MAAW,CAAC,UAC3B,KAAA,IAAA,CAAK,KAAM,CAAA;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAS,EAAA,IAAA,CAAK,QAAS,CAAA,UAAU,EAAE,OAAO,CAAA;AAAA,QAC1C;AAAA,OACA;AAAA,KACF;AAAA;AAEF,CAAA;AAtBmD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA5C,IAAM,YAAN,GAAA;AAwBP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreNumber.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveNumber } from '../lib/resolvers/number';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<number> {\n\tprivate readonly messages = {\n\t\t[Identifiers.ArgumentNumberTooSmall]: ({ minimum }: Argument.Context) => `The given number must be greater than ${minimum}.`,\n\t\t[Identifiers.ArgumentNumberTooLarge]: ({ maximum }: Argument.Context) => `The given number must be less than ${maximum}.`,\n\t\t[Identifiers.ArgumentNumberError]: () => 'The argument did not resolve to a valid number.'\n\t} as const;\n\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'number' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<number> {\n\t\tconst resolved = resolveNumber(parameter, { minimum: context.minimum, maximum: context.maximum });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: this.messages[identifier](context),\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'number',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}