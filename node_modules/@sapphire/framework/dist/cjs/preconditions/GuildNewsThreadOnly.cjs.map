{"version":3,"sources":["../../../src/preconditions/GuildNewsThreadOnly.ts"],"names":["AllFlowsPrecondition","ChannelType","Identifiers","container"],"mappings":";;;;;;;;;AAKO,IAAM,iBAAA,GAAN,MAAM,iBAAA,SAAyBA,qCAAqB,CAAA;AAAA,EACnD,WAAW,OAA+C,EAAA;AAChE,IAAO,OAAA,OAAA,CAAQ,QAAQ,IAAS,KAAAC,sBAAA,CAAY,qBAAqB,IAAK,CAAA,EAAA,EAAO,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AACnG,EAEA,MAAa,aAAa,WAA4E,EAAA;AACrG,IAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,2BAAA,CAA4B,WAAW,CAAA;AAClE,IAAO,OAAA,OAAA,CAAQ,SAASA,sBAAY,CAAA,kBAAA,GAAqB,KAAK,EAAG,EAAA,GAAI,KAAK,eAAgB,EAAA;AAAA;AAC3F,EAEA,MAAa,eAAe,WAA8E,EAAA;AACzG,IAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,2BAAA,CAA4B,WAAW,CAAA;AAClE,IAAO,OAAA,OAAA,CAAQ,SAASA,sBAAY,CAAA,kBAAA,GAAqB,KAAK,EAAG,EAAA,GAAI,KAAK,eAAgB,EAAA;AAAA;AAC3F,EAEQ,eAA+C,GAAA;AACtD,IAAA,OAAO,KAAK,KAAM,CAAA;AAAA,MACjB,YAAYC,2BAAY,CAAA,+BAAA;AAAA,MACxB,OAAS,EAAA;AAAA,KACT,CAAA;AAAA;AAEH,CAAA;AArB2D,MAAA,CAAA,iBAAA,EAAA,kBAAA,CAAA;AAApD,IAAM,gBAAN,GAAA;AAuBP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,qBAAA;AAAA,EACN,KAAO,EAAA,gBAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"GuildNewsThreadOnly.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { ChannelType, ChatInputCommandInteraction, ContextMenuCommandInteraction, Message } from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tpublic messageRun(message: Message): AllFlowsPrecondition.Result {\n\t\treturn message.thread?.type === ChannelType.AnnouncementThread ? this.ok() : this.makeSharedError();\n\t}\n\n\tpublic async chatInputRun(interaction: ChatInputCommandInteraction): AllFlowsPrecondition.AsyncResult {\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\t\treturn channel.type === ChannelType.AnnouncementThread ? this.ok() : this.makeSharedError();\n\t}\n\n\tpublic async contextMenuRun(interaction: ContextMenuCommandInteraction): AllFlowsPrecondition.AsyncResult {\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\t\treturn channel.type === ChannelType.AnnouncementThread ? this.ok() : this.makeSharedError();\n\t}\n\n\tprivate makeSharedError(): AllFlowsPrecondition.Result {\n\t\treturn this.error({\n\t\t\tidentifier: Identifiers.PreconditionGuildNewsThreadOnly,\n\t\t\tmessage: 'You can only run this command in server announcement thread channels.'\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'GuildNewsThreadOnly',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}