{"version":3,"sources":["../../../src/listeners/CoreInteractionCreate.ts"],"names":["Listener","Events","container"],"mappings":";;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAA0C,CAAA;AAAA,EACpE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,mBAAmB,CAAA;AAAA;AACnD,EAEA,MAAa,IAAI,WAA0B,EAAA;AAC1C,IAAI,IAAA,WAAA,CAAY,oBAAsB,EAAA;AACrC,MAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,IAAK,CAAAA,iBAAA,CAAO,0BAA0B,WAAW,CAAA;AAAA,KACxE,MAAA,IAAW,WAAY,CAAA,oBAAA,EAAwB,EAAA;AAC9C,MAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,IAAK,CAAAA,iBAAA,CAAO,4BAA4B,WAAW,CAAA;AAAA,KAC1E,MAAA,IAAW,WAAY,CAAA,cAAA,EAAkB,EAAA;AACxC,MAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,IAAK,CAAAA,iBAAA,CAAO,iCAAiC,WAAW,CAAA;AAAA,eACpE,WAAY,CAAA,kBAAA,EAAwB,IAAA,WAAA,CAAY,eAAiB,EAAA;AAC3E,MAAA,MAAM,KAAK,SAAU,CAAA,MAAA,CAAO,IAAI,sBAAsB,CAAA,CAAE,IAAI,WAAW,CAAA;AAAA,KACjE,MAAA;AACN,MAAK,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAK,CAAa,UAAA,EAAA,IAAA,CAAK,QAAS,CAAA,IAAI,CAAkC,8BAAA,EAAA,WAAA,CAAoB,WAAY,CAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AACnI;AAEF,CAAA;AAlB4E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAArE,IAAM,YAAN,GAAA;AAoBP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,uBAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreInteractionCreate.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { Interaction } from 'discord.js';\nimport { Listener } from '../lib/structures/Listener';\nimport { Events } from '../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.InteractionCreate> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.InteractionCreate });\n\t}\n\n\tpublic async run(interaction: Interaction) {\n\t\tif (interaction.isChatInputCommand()) {\n\t\t\tthis.container.client.emit(Events.PossibleChatInputCommand, interaction);\n\t\t} else if (interaction.isContextMenuCommand()) {\n\t\t\tthis.container.client.emit(Events.PossibleContextMenuCommand, interaction);\n\t\t} else if (interaction.isAutocomplete()) {\n\t\t\tthis.container.client.emit(Events.PossibleAutocompleteInteraction, interaction);\n\t\t} else if (interaction.isMessageComponent() || interaction.isModalSubmit()) {\n\t\t\tawait this.container.stores.get('interaction-handlers').run(interaction);\n\t\t} else {\n\t\t\tthis.container.logger.warn(`[Sapphire ${this.location.name}] Unhandled interaction type: ${(interaction as any).constructor.name}`);\n\t\t}\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreInteractionCreate',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}