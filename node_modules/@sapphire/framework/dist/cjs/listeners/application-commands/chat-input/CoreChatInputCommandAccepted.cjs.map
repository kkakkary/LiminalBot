{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CoreChatInputCommandAccepted.ts"],"names":["Listener","Events","result","Result","stopwatch","Stopwatch","container"],"mappings":";;;;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAiD,CAAA;AAAA,EAC3E,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,0BAA0B,CAAA;AAAA;AAC1D,EAEA,MAAa,IAAI,OAA0C,EAAA;AAC1D,IAAA,MAAM,EAAE,OAAA,EAAS,OAAS,EAAA,WAAA,EAAgB,GAAA,OAAA;AAE1C,IAAA,MAAMC,QAAS,GAAA,MAAMC,aAAO,CAAA,SAAA,CAAU,YAAY;AACjD,MAAK,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAKF,iBAAO,CAAA,mBAAA,EAAqB,aAAa,OAAS,EAAA,EAAE,GAAG,OAAA,EAAS,CAAA;AAE3F,MAAM,MAAAG,WAAA,GAAY,IAAIC,mBAAU,EAAA;AAChC,MAAA,MAAMH,OAAS,GAAA,MAAM,OAAQ,CAAA,YAAA,CAAa,aAAa,OAAO,CAAA;AAC9D,MAAA,MAAM,EAAE,QAAA,EAAa,GAAAE,WAAA,CAAU,IAAK,EAAA;AAEpC,MAAK,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAKH,iBAAO,CAAA,uBAAA,EAAyB,EAAE,GAAG,OAAS,EAAA,MAAA,EAAAC,OAAQ,EAAA,QAAA,EAAU,CAAA;AAE3F,MAAO,OAAA,QAAA;AAAA,KACP,CAAA;AAED,IAAAA,QAAA,CAAO,WAAW,CAAC,KAAA,KAAU,IAAK,CAAA,SAAA,CAAU,OAAO,IAAK,CAAAD,iBAAA,CAAO,qBAAuB,EAAA,KAAA,EAAO,EAAE,GAAG,OAAA,EAAS,QAAU,EAAA,EAAA,EAAI,CAAC,CAAA;AAE1H,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,IAAA,CAAKA,iBAAO,CAAA,sBAAA,EAAwB,aAAa,OAAS,EAAA;AAAA,MAC/E,GAAG,OAAA;AAAA,MACH,OAAA,EAASC,SAAO,IAAK,EAAA;AAAA,MACrB,QAAA,EAAUA,QAAO,CAAA,QAAA,CAAS,EAAE;AAAA,KAC5B,CAAA;AAAA;AAEH,CAAA;AA5BmF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA5E,IAAM,YAAN,GAAA;AA8BP,KAAKI,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,8BAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CoreChatInputCommandAccepted.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type ChatInputCommandAcceptedPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ChatInputCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ChatInputCommandAccepted });\n\t}\n\n\tpublic async run(payload: ChatInputCommandAcceptedPayload) {\n\t\tconst { command, context, interaction } = payload;\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandRun, interaction, command, { ...payload });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.chatInputRun(interaction, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tthis.container.client.emit(Events.ChatInputCommandSuccess, { ...payload, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => this.container.client.emit(Events.ChatInputCommandError, error, { ...payload, duration: -1 }));\n\n\t\tthis.container.client.emit(Events.ChatInputCommandFinish, interaction, command, {\n\t\t\t...payload,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreChatInputCommandAccepted',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}