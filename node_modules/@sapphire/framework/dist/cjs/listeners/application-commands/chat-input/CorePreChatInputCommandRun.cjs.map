{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CorePreChatInputCommandRun.ts"],"names":["Listener","Events","container"],"mappings":";;;;;;;;AAIO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAA+C,CAAA;AAAA,EACzE,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,wBAAwB,CAAA;AAAA;AACxD,EAEA,MAAa,IAAI,OAAwC,EAAA;AACxD,IAAM,MAAA,EAAE,OAAS,EAAA,WAAA,EAAgB,GAAA,OAAA;AAGjC,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,GAAI,CAAA,eAAe,CAAE,CAAA,YAAA,CAAa,WAAa,EAAA,OAAA,EAAS,OAAc,CAAA;AACvH,IAAI,IAAA,YAAA,CAAa,OAAS,EAAA;AACzB,MAAK,IAAA,CAAA,SAAA,CAAU,OAAO,IAAK,CAAAA,iBAAA,CAAO,wBAAwB,YAAa,CAAA,SAAA,IAAa,OAAO,CAAA;AAC3F,MAAA;AAAA;AAID,IAAA,MAAM,cAAc,MAAM,OAAA,CAAQ,cAAc,YAAa,CAAA,WAAA,EAAa,SAAS,OAAc,CAAA;AACjG,IAAI,IAAA,WAAA,CAAY,OAAS,EAAA;AACxB,MAAK,IAAA,CAAA,SAAA,CAAU,OAAO,IAAK,CAAAA,iBAAA,CAAO,wBAAwB,WAAY,CAAA,SAAA,IAAa,OAAO,CAAA;AAC1F,MAAA;AAAA;AAGD,IAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,IAAK,CAAAA,iBAAA,CAAO,0BAA0B,OAAO,CAAA;AAAA;AAErE,CAAA;AAxBiF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1E,IAAM,YAAN,GAAA;AA0BP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,4BAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CorePreChatInputCommandRun.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type PreChatInputCommandRunPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreChatInputCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreChatInputCommandRun });\n\t}\n\n\tpublic async run(payload: PreChatInputCommandRunPayload) {\n\t\tconst { command, interaction } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').chatInputRun(interaction, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.chatInputRun(interaction, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.container.client.emit(Events.ChatInputCommandAccepted, payload);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePreChatInputCommandRun',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}