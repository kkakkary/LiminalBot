{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CorePossibleChatInputCommand.ts"],"names":["Listener","Events","container"],"mappings":";;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAiD,CAAA;AAAA,EAC3E,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,0BAA0B,CAAA;AAAA;AAC1D,EAEO,IAAI,WAA0C,EAAA;AACpD,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,SAAA;AAChC,IAAM,MAAA,YAAA,GAAe,MAAO,CAAA,GAAA,CAAI,UAAU,CAAA;AAE1C,IAAM,MAAA,OAAA,GAAU,aAAa,GAAI,CAAA,WAAA,CAAY,SAAS,CAAK,IAAA,YAAA,CAAa,GAAI,CAAA,WAAA,CAAY,WAAW,CAAA;AACnG,IAAA,IAAI,CAAC,OAAS,EAAA;AACb,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,uBAAyB,EAAA;AAAA,QAC3C,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY;AAAA,OAClF,CAAA;AACD,MAAA;AAAA;AAGD,IAAI,IAAA,CAAC,QAAQ,YAAc,EAAA;AAC1B,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,yCAA2C,EAAA;AAAA,QAC7D,OAAA;AAAA,QACA,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY;AAAA,OAClF,CAAA;AACD,MAAA;AAAA;AAGD,IAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,sBAAwB,EAAA;AAAA,MAC1C,OAAA;AAAA,MACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY,EAAA;AAAA,MAClF;AAAA,KACA,CAAA;AAAA;AAEH,CAAA;AAjCmF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA5E,IAAM,YAAN,GAAA;AAmCP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,8BAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CorePossibleChatInputCommand.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ChatInputCommandInteraction } from 'discord.js';\nimport { Listener } from '../../../lib/structures/Listener';\nimport type { ChatInputCommand } from '../../../lib/types/CommandTypes';\nimport { Events } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleChatInputCommand> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleChatInputCommand });\n\t}\n\n\tpublic run(interaction: ChatInputCommandInteraction) {\n\t\tconst { client, stores } = this.container;\n\t\tconst commandStore = stores.get('commands');\n\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownChatInputCommand, {\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (!command.chatInputRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveChatInputCommandHandler, {\n\t\t\t\tcommand,\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tclient.emit(Events.PreChatInputCommandRun, {\n\t\t\tcommand: command as ChatInputCommand,\n\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\tinteraction\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleChatInputCommand',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}