{"version":3,"sources":["../../../../../src/listeners/application-commands/context-menu/CorePossibleContextMenuCommand.ts"],"names":["Listener","Events","container"],"mappings":";;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAmD,CAAA;AAAA,EAC7E,YAAY,OAAiC,EAAA;AACnD,IAAA,KAAA,CAAM,OAAS,EAAA,EAAE,KAAO,EAAAC,iBAAA,CAAO,4BAA4B,CAAA;AAAA;AAC5D,EAEO,IAAI,WAA4C,EAAA;AACtD,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,SAAA;AAChC,IAAM,MAAA,YAAA,GAAe,MAAO,CAAA,GAAA,CAAI,UAAU,CAAA;AAE1C,IAAM,MAAA,OAAA,GAAU,aAAa,GAAI,CAAA,WAAA,CAAY,SAAS,CAAK,IAAA,YAAA,CAAa,GAAI,CAAA,WAAA,CAAY,WAAW,CAAA;AACnG,IAAA,IAAI,CAAC,OAAS,EAAA;AACb,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,yBAA2B,EAAA;AAAA,QAC7C,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY;AAAA,OAClF,CAAA;AACD,MAAA;AAAA;AAGD,IAAI,IAAA,CAAC,QAAQ,cAAgB,EAAA;AAC5B,MAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,2CAA6C,EAAA;AAAA,QAC/D,OAAA;AAAA,QACA,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY;AAAA,OAClF,CAAA;AACD,MAAA;AAAA;AAGD,IAAO,MAAA,CAAA,IAAA,CAAKA,kBAAO,wBAA0B,EAAA;AAAA,MAC5C,OAAA;AAAA,MACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAW,EAAA,WAAA,EAAa,YAAY,WAAY,EAAA;AAAA,MAClF;AAAA,KACA,CAAA;AAAA;AAEH,CAAA;AAjCqF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA9E,IAAM,YAAN,GAAA;AAmCP,KAAKC,gBAAA,CAAU,OAAO,SAAU,CAAA;AAAA,EAC/B,IAAM,EAAA,gCAAA;AAAA,EACN,KAAO,EAAA,YAAA;AAAA,EACP,KAAO,EAAA;AACR,CAAC,CAAA","file":"CorePossibleContextMenuCommand.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ContextMenuCommandInteraction } from 'discord.js';\nimport { Listener } from '../../../lib/structures/Listener';\nimport type { ContextMenuCommand } from '../../../lib/types/CommandTypes';\nimport { Events } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleContextMenuCommand> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleContextMenuCommand });\n\t}\n\n\tpublic run(interaction: ContextMenuCommandInteraction) {\n\t\tconst { client, stores } = this.container;\n\t\tconst commandStore = stores.get('commands');\n\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownContextMenuCommand, {\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (!command.contextMenuRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveContextMenuCommandHandler, {\n\t\t\t\tcommand,\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tclient.emit(Events.PreContextMenuCommandRun, {\n\t\t\tcommand: command as ContextMenuCommand,\n\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\tinteraction\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleContextMenuCommand',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}