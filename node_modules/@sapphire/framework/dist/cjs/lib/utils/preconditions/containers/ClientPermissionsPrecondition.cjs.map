{"version":3,"sources":["../../../../../../src/lib/utils/preconditions/containers/ClientPermissionsPrecondition.ts"],"names":["PermissionsBitField"],"mappings":";;;;;;AAwBO,IAAM,8BAAA,GAAN,MAAM,8BAAkG,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQvG,YAAY,WAAmC,EAAA;AACrD,IAAA,IAAA,CAAK,IAAO,GAAA,mBAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACd,WAAA,EAAa,IAAIA,8BAAA,CAAoB,WAAW;AAAA,KACjD;AAAA;AAEF,CAAA;AAd+G,MAAA,CAAA,8BAAA,EAAA,+BAAA,CAAA;AAAxG,IAAM,6BAAN,GAAA","file":"ClientPermissionsPrecondition.cjs","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport type { PreconditionSingleResolvableDetails } from '../PreconditionContainerSingle';\n\n/**\n * Constructs a contextful permissions precondition requirement.\n * @since 1.0.0\n * @example\n * ```typescript\n * export class CoreCommand extends Command {\n *   public constructor(context: Command.Context) {\n *     super(context, {\n *       preconditions: [\n *         'GuildOnly',\n *         new ClientPermissionsPrecondition('ADD_REACTIONS')\n *       ]\n *     });\n *   }\n *\n *   public messageRun(message: Message, args: Args) {\n *     // ...\n *   }\n * }\n * ```\n */\nexport class ClientPermissionsPrecondition implements PreconditionSingleResolvableDetails<'ClientPermissions'> {\n\tpublic name: 'ClientPermissions';\n\tpublic context: { permissions: PermissionsBitField };\n\n\t/**\n\t * Constructs a precondition container entry.\n\t * @param permissions The permissions that will be required by this command.\n\t */\n\tpublic constructor(permissions: PermissionResolvable) {\n\t\tthis.name = 'ClientPermissions';\n\t\tthis.context = {\n\t\t\tpermissions: new PermissionsBitField(permissions)\n\t\t};\n\t}\n}\n"]}