{"version":3,"sources":["../../../../../src/lib/utils/application-commands/ApplicationCommandRegistries.ts"],"names":["defaultBehaviorWhenNotIdentical","RegisterBehavior","defaultGuildIds","ApplicationCommandRegistry","container","Events","emitPerRegistryError","getNeededRegistryParameters","retry","bulkOverwriteDebug","ApplicationCommandType","InternalRegistryAPIType","bulkOverwriteWarn","bulkOverwriteInfo","emitBulkOverwriteError"],"mappings":"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","file":"ApplicationCommandRegistries.cjs","sourcesContent":["/* eslint-disable @typescript-eslint/dot-notation */\nimport { container } from '@sapphire/pieces';\nimport { retry } from '@sapphire/utilities';\nimport type { RESTPostAPIApplicationCommandsJSONBody } from 'discord-api-types/v10';\nimport { ApplicationCommandType, type ApplicationCommandManager } from 'discord.js';\nimport type { Command } from '../../structures/Command';\nimport type { CommandStore } from '../../structures/CommandStore';\nimport { InternalRegistryAPIType, RegisterBehavior } from '../../types/Enums';\nimport { Events } from '../../types/Events';\nimport { ApplicationCommandRegistry } from './ApplicationCommandRegistry';\nimport { getNeededRegistryParameters } from './getNeededParameters';\nimport { emitBulkOverwriteError, emitPerRegistryError } from './registriesErrors';\nimport { bulkOverwriteDebug, bulkOverwriteInfo, bulkOverwriteWarn } from './registriesLog';\n\nexport let defaultBehaviorWhenNotIdentical = RegisterBehavior.Overwrite;\nexport let defaultGuildIds: ApplicationCommandRegistry.RegisterOptions['guildIds'] = undefined;\nlet bulkOVerwriteRetries = 1;\n\nexport const registries = new Map<string, ApplicationCommandRegistry>();\n\nexport const allGuildIdsToFetchCommandsFor = new Set<string>();\n\n/**\n * Acquires a registry for a command by its name.\n * @param commandName The name of the command.\n * @returns The application command registry for the command\n */\nexport function acquire(commandName: string) {\n\tconst existing = registries.get(commandName);\n\tif (existing) {\n\t\treturn existing;\n\t}\n\n\tconst newRegistry = new ApplicationCommandRegistry(commandName);\n\tregistries.set(commandName, newRegistry);\n\n\treturn newRegistry;\n}\n\n/**\n * Sets the default behavior when registered commands aren't identical to provided data.\n * @param behavior The default behavior to have. Set this to `null` to reset it to the default\n * of `RegisterBehavior.Overwrite`.\n */\nexport function setDefaultBehaviorWhenNotIdentical(behavior?: RegisterBehavior | null) {\n\tdefaultBehaviorWhenNotIdentical = behavior ?? RegisterBehavior.Overwrite;\n}\n\nexport function getDefaultBehaviorWhenNotIdentical() {\n\treturn defaultBehaviorWhenNotIdentical;\n}\n\n/**\n * Sets the default guild ids for registering commands. This is used when a command is registered _without_ providing\n * `guildIds` in that command's own {@link Command.registerApplicationCommands} method.\n * @param guildIds The default guildIds to set. Set this to `null` to reset it to the default\n * of `undefined`.\n */\nexport function setDefaultGuildIds(guildIds?: ApplicationCommandRegistry.RegisterOptions['guildIds'] | null) {\n\tdefaultGuildIds = guildIds ?? undefined;\n}\n\nexport function getDefaultGuildIds() {\n\treturn defaultGuildIds;\n}\n\n/**\n * Sets the amount of retries for when registering commands, only applies when {@link defaultBehaviorWhenNotIdentical}\n * is set to {@link RegisterBehavior.BulkOverwrite}. This is used if registering the commands times out.\n * The default value is `1`, which means no retries are performed.\n * @param newAmountOfRetries The new amount of retries to set. Set this to `null` to reset it to the default\n */\nexport function setBulkOverwriteRetries(newAmountOfRetries: number | null) {\n\tnewAmountOfRetries ??= 1;\n\n\tif (newAmountOfRetries <= 0) throw new RangeError('The amount of retries must be greater than 0');\n\n\tbulkOVerwriteRetries = newAmountOfRetries;\n}\n\nexport function getBulkOverwriteRetries() {\n\treturn bulkOVerwriteRetries;\n}\n\nexport async function handleRegistryAPICalls() {\n\tcontainer.client.emit(Events.ApplicationCommandRegistriesInitialising);\n\n\tconst commandStore = container.stores.get('commands');\n\n\tfor (const command of commandStore.values()) {\n\t\tif (command.registerApplicationCommands) {\n\t\t\ttry {\n\t\t\t\tawait command.registerApplicationCommands(command.applicationCommandRegistry);\n\t\t\t} catch (error) {\n\t\t\t\temitPerRegistryError(error, command);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (getDefaultBehaviorWhenNotIdentical() === RegisterBehavior.BulkOverwrite) {\n\t\tawait handleBulkOverwrite(commandStore, container.client.application!.commands);\n\t\treturn;\n\t}\n\n\tconst params = await getNeededRegistryParameters(allGuildIdsToFetchCommandsFor);\n\n\tawait handleAppendOrUpdate(commandStore, params);\n}\n\nexport async function handleBulkOverwrite(commandStore: CommandStore, applicationCommands: ApplicationCommandManager) {\n\tconst now = Date.now();\n\n\t// Map registries by guild, global, etc\n\tconst foundGlobalCommands: BulkOverwriteData[] = [];\n\tconst foundGuildCommands: Record<string, BulkOverwriteData[]> = {};\n\n\t// Collect all data\n\tfor (const command of commandStore.values()) {\n\t\tconst registry = command.applicationCommandRegistry;\n\n\t\tfor (const call of registry['apiCalls']) {\n\t\t\t// Guild only cmd\n\t\t\tif (call.registerOptions.guildIds?.length) {\n\t\t\t\tfor (const guildId of call.registerOptions.guildIds) {\n\t\t\t\t\tfoundGuildCommands[guildId] ??= [];\n\n\t\t\t\t\tfoundGuildCommands[guildId].push({ piece: command, data: call.builtData });\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Global command\n\t\t\tfoundGlobalCommands.push({ piece: command, data: call.builtData });\n\t\t}\n\t}\n\n\t// Handle global commands\n\tawait retry(() => handleBulkOverwriteGlobalCommands(commandStore, applicationCommands, foundGlobalCommands), bulkOVerwriteRetries);\n\n\t// Handle guild commands\n\tfor (const [guildId, guildCommands] of Object.entries(foundGuildCommands)) {\n\t\tawait retry(() => handleBulkOverwriteGuildCommands(commandStore, applicationCommands, guildId, guildCommands), bulkOVerwriteRetries);\n\t}\n\n\tcontainer.client.emit(Events.ApplicationCommandRegistriesRegistered, registries, Date.now() - now);\n}\n\nasync function handleBulkOverwriteGlobalCommands(\n\tcommandStore: CommandStore,\n\tapplicationCommands: ApplicationCommandManager,\n\tfoundGlobalCommands: BulkOverwriteData[]\n) {\n\ttry {\n\t\tbulkOverwriteDebug(`Overwriting global application commands, now at ${foundGlobalCommands.length} commands`);\n\t\tconst result = await applicationCommands.set(foundGlobalCommands.map((x) => x.data));\n\n\t\t// Go through each registered command, find its piece and alias it\n\t\tfor (const [id, globalCommand] of result.entries()) {\n\t\t\tconst piece = foundGlobalCommands.find((x) => x.data.name === globalCommand.name)?.piece;\n\n\t\t\tif (piece) {\n\t\t\t\tconst registry = piece.applicationCommandRegistry;\n\n\t\t\t\tswitch (globalCommand.type) {\n\t\t\t\t\tcase ApplicationCommandType.ChatInput: {\n\t\t\t\t\t\tregistry['handleIdAddition'](InternalRegistryAPIType.ChatInput, id);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ApplicationCommandType.User:\n\t\t\t\t\tcase ApplicationCommandType.Message: {\n\t\t\t\t\t\tregistry['handleIdAddition'](InternalRegistryAPIType.ContextMenu, id);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// idHints are useless, and any manually added id or names could end up not being valid any longer if you use bulk overwrites\n\t\t\t\t// That said, this might be an issue, so we might need to do it like `handleAppendOrUpdate`\n\t\t\t\tcommandStore.aliases.set(id, piece);\n\t\t\t} else {\n\t\t\t\tbulkOverwriteWarn(\n\t\t\t\t\t`Registered global command \"${globalCommand.name}\" (${id}) but failed to find the piece in the command store. This should not happen`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tbulkOverwriteInfo(`Successfully overwrote global application commands. The application now has ${result.size} global commands`);\n\t} catch (error) {\n\t\tif (error instanceof Error && error.name === 'AbortError') throw error;\n\n\t\temitBulkOverwriteError(error, null);\n\t}\n}\n\nasync function handleBulkOverwriteGuildCommands(\n\tcommandStore: CommandStore,\n\tapplicationCommands: ApplicationCommandManager,\n\tguildId: string,\n\tguildCommands: BulkOverwriteData[]\n) {\n\ttry {\n\t\tbulkOverwriteDebug(`Overwriting guild application commands for guild ${guildId}, now at ${guildCommands.length} commands`);\n\t\tconst result = await applicationCommands.set(\n\t\t\tguildCommands.map((x) => x.data),\n\t\t\tguildId\n\t\t);\n\n\t\t// Go through each registered command, find its piece and alias it\n\t\tfor (const [id, guildCommand] of result.entries()) {\n\t\t\t// I really hope nobody has a guild command with the same name as another command -.-\n\t\t\t// Not like they could anyways as Discord would throw an error for duplicate names\n\t\t\t// But yknow... If you're reading this and you did this... Why?\n\t\t\tconst piece = guildCommands.find((x) => x.data.name === guildCommand.name)?.piece;\n\n\t\t\tif (piece) {\n\t\t\t\tconst registry = piece.applicationCommandRegistry;\n\n\t\t\t\tswitch (guildCommand.type) {\n\t\t\t\t\tcase ApplicationCommandType.ChatInput: {\n\t\t\t\t\t\tregistry['handleIdAddition'](InternalRegistryAPIType.ChatInput, id, guildId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ApplicationCommandType.User:\n\t\t\t\t\tcase ApplicationCommandType.Message: {\n\t\t\t\t\t\tregistry['handleIdAddition'](InternalRegistryAPIType.ContextMenu, id, guildId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// idHints are useless, and any manually added ids or names could no longer be valid if you use bulk overwrites.\n\t\t\t\t// That said, this might be an issue, so we might need to do it like `handleAppendOrUpdate`\n\t\t\t\tcommandStore.aliases.set(id, piece);\n\t\t\t} else {\n\t\t\t\tbulkOverwriteWarn(\n\t\t\t\t\t`Registered guild command \"${guildCommand.name}\" (${id}) but failed to find the piece in the command store. This should not happen`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tbulkOverwriteInfo(\n\t\t\t`Successfully overwrote guild application commands for guild ${guildId}. The application now has ${result.size} guild commands for guild ${guildId}`\n\t\t);\n\t} catch (error) {\n\t\tif (error instanceof Error && error.name === 'AbortError') throw error;\n\n\t\temitBulkOverwriteError(error, guildId);\n\t}\n}\n\nasync function handleAppendOrUpdate(\n\tcommandStore: CommandStore,\n\t{ applicationCommands, globalCommands, guildCommands }: Awaited<ReturnType<typeof getNeededRegistryParameters>>\n) {\n\tconst now = Date.now();\n\n\tfor (const registry of registries.values()) {\n\t\t// eslint-disable-next-line @typescript-eslint/dot-notation\n\t\tawait registry['runAPICalls'](applicationCommands, globalCommands, guildCommands);\n\n\t\tconst piece = registry.command;\n\n\t\tif (piece) {\n\t\t\tfor (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {\n\t\t\t\tcommandStore.aliases.set(nameOrId, piece);\n\t\t\t}\n\n\t\t\tfor (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {\n\t\t\t\tcommandStore.aliases.set(nameOrId, piece);\n\t\t\t}\n\t\t}\n\t}\n\n\tcontainer.client.emit(Events.ApplicationCommandRegistriesRegistered, registries, Date.now() - now);\n}\n\ninterface BulkOverwriteData {\n\tpiece: Command;\n\tdata: RESTPostAPIApplicationCommandsJSONBody;\n}\n"]}