{"version":3,"sources":["../../../../../../src/lib/utils/application-commands/compute-differences/integration_types.ts"],"names":[],"mappings":";;;;;;AAGO,UAAU,qBAAA,CAChB,0BACA,mBAC+B,EAAA;AAE/B,EAAA,IAAI,CAAC,wBAAA,EAA0B,MAAU,IAAA,mBAAA,EAAqB,MAAQ,EAAA;AACrE,IAAM,MAAA;AAAA,MACL,GAAK,EAAA,kBAAA;AAAA,MACL,QAAU,EAAA,8BAAA;AAAA,MACV,QAAU,EAAA;AAAA,KACX;AAAA,GAGQ,MAAA,IAAA,wBAAA,EAA0B,MAAU,IAAA,CAAC,qBAAqB,MAAQ,EAAA;AAC1E,IAAM,MAAA;AAAA,MACL,GAAK,EAAA,kBAAA;AAAA,MACL,QAAU,EAAA,2BAAA;AAAA,MACV,QAAU,EAAA;AAAA,KACX;AAAA,GACD,MAAA,IAES,qBAAqB,MAAQ,EAAA;AACrC,IAAA,IAAI,KAAQ,GAAA,CAAA;AAEZ,IAAA,KAAA,MAAW,sBAAsB,mBAAqB,EAAA;AACrD,MAAA,MAAM,YAAe,GAAA,KAAA,EAAA;AAErB,MAAI,IAAA,wBAAA,CAA0B,YAAY,CAAA,KAAM,kBAAoB,EAAA;AACnE,QAAM,MAAA;AAAA,UACL,GAAA,EAAK,oBAAoB,YAAY,CAAA,CAAA,CAAA;AAAA,UACrC,QAAU,EAAA,CAAA,iBAAA,EAAoB,wBAA2B,GAAA,YAAY,CAAC,CAAA,CAAA;AAAA,UACtE,QAAA,EAAU,oBAAoB,kBAAkB,CAAA;AAAA,SACjD;AAAA;AACD;AAGD,IAAI,IAAA,KAAA,GAAQ,yBAA0B,MAAQ,EAAA;AAC7C,MAAI,IAAA,IAAA;AAEJ,MAAA,OAAA,CAAQ,IAAO,GAAA,wBAAA,CAA0B,KAAK,CAAA,MAAO,MAAW,EAAA;AAC/D,QAAM,MAAA;AAAA,UACL,GAAA,EAAK,oBAAoB,KAAK,CAAA,CAAA,CAAA;AAAA,UAC9B,QAAA,EAAU,oBAAoB,IAAI,CAAA,QAAA,CAAA;AAAA,UAClC,QAAU,EAAA;AAAA,SACX;AAEA,QAAA,KAAA,EAAA;AAAA;AACD;AACD;AAEF;AAlDiB,MAAA,CAAA,qBAAA,EAAA,uBAAA,CAAA","file":"integration_types.cjs","sourcesContent":["import type { ApplicationIntegrationType } from 'discord.js';\nimport type { CommandDifference } from './_shared';\n\nexport function* checkIntegrationTypes(\n\texistingIntegrationTypes?: ApplicationIntegrationType[],\n\tnewIntegrationTypes?: ApplicationIntegrationType[]\n): Generator<CommandDifference> {\n\t// 0. No existing integration types and now we have integration types\n\tif (!existingIntegrationTypes?.length && newIntegrationTypes?.length) {\n\t\tyield {\n\t\t\tkey: 'integrationTypes',\n\t\t\toriginal: 'no integration types present',\n\t\t\texpected: 'integration types present'\n\t\t};\n\t}\n\t// 1. Existing integration types and now we have no integration types\n\telse if (existingIntegrationTypes?.length && !newIntegrationTypes?.length) {\n\t\tyield {\n\t\t\tkey: 'integrationTypes',\n\t\t\toriginal: 'integration types present',\n\t\t\texpected: 'no integration types present'\n\t\t};\n\t}\n\t// 2. Maybe changes in order or additions, log\n\telse if (newIntegrationTypes?.length) {\n\t\tlet index = 0;\n\n\t\tfor (const newIntegrationType of newIntegrationTypes) {\n\t\t\tconst currentIndex = index++;\n\n\t\t\tif (existingIntegrationTypes![currentIndex] !== newIntegrationType) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `integrationTypes[${currentIndex}]`,\n\t\t\t\t\toriginal: `integration type ${existingIntegrationTypes?.[currentIndex]}`,\n\t\t\t\t\texpected: `integration type ${newIntegrationType}`\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (index < existingIntegrationTypes!.length) {\n\t\t\tlet type: ApplicationIntegrationType;\n\n\t\t\twhile ((type = existingIntegrationTypes![index]) !== undefined) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `integrationTypes[${index}]`,\n\t\t\t\t\toriginal: `integration type ${type} present`,\n\t\t\t\t\texpected: 'no integration type present'\n\t\t\t\t};\n\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}