{"version":3,"sources":["../../../../../../../src/lib/utils/application-commands/compute-differences/option/channelTypes.ts"],"names":["ChannelType","currentIndex"],"mappings":"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","file":"channelTypes.cjs","sourcesContent":["import { ChannelType, type APIApplicationCommandChannelOption } from 'discord-api-types/v10';\nimport type { CommandDifference } from '../_shared';\n\nconst channelTypeToPrettyName: Record<Exclude<APIApplicationCommandChannelOption['channel_types'], undefined>[number], string> = {\n\t[ChannelType.GuildText]: 'text channel (type 0)',\n\t[ChannelType.GuildVoice]: 'voice channel (type 2)',\n\t[ChannelType.GuildCategory]: 'guild category (type 4)',\n\t[ChannelType.GuildAnnouncement]: 'guild announcement channel (type 5)',\n\t[ChannelType.AnnouncementThread]: 'guild announcement thread (type 10)',\n\t[ChannelType.PublicThread]: 'guild public thread (type 11)',\n\t[ChannelType.PrivateThread]: 'guild private thread (type 12)',\n\t[ChannelType.GuildStageVoice]: 'guild stage voice channel (type 13)',\n\t[ChannelType.GuildDirectory]: 'guild directory (type 14)',\n\t[ChannelType.GuildForum]: 'guild forum (type 15)',\n\t[ChannelType.GuildMedia]: 'guild media channel (type 16)'\n};\n\nconst unknownChannelType = (type: number): string => `unknown channel type (${type}); please contact Sapphire developers about this!`;\n\nfunction getChannelTypePrettyName(type: keyof typeof channelTypeToPrettyName): string {\n\treturn channelTypeToPrettyName[type] ?? unknownChannelType(type);\n}\n\nexport function* checkChannelTypes({\n\texistingChannelTypes,\n\tnewChannelTypes,\n\tcurrentIndex,\n\tkeyPath\n}: {\n\tcurrentIndex: number;\n\tkeyPath: (index: number) => string;\n\texistingChannelTypes?: APIApplicationCommandChannelOption['channel_types'];\n\tnewChannelTypes?: APIApplicationCommandChannelOption['channel_types'];\n}): Generator<CommandDifference> {\n\t// 0. No existing channel types and now we have channel types\n\tif (!existingChannelTypes?.length && newChannelTypes?.length) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.channel_types`,\n\t\t\toriginal: 'no channel types present',\n\t\t\texpected: 'channel types present'\n\t\t};\n\t}\n\t// 1. Existing channel types and now we have no channel types\n\telse if (existingChannelTypes?.length && !newChannelTypes?.length) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.channel_types`,\n\t\t\toriginal: 'channel types present',\n\t\t\texpected: 'no channel types present'\n\t\t};\n\t}\n\t// 2. Iterate over each channel type if we have any and see what's different\n\telse if (newChannelTypes?.length) {\n\t\tlet index = 0;\n\t\tfor (const channelType of newChannelTypes) {\n\t\t\tconst currentIndex = index++;\n\t\t\tconst existingChannelType = existingChannelTypes![currentIndex];\n\t\t\tif (channelType !== existingChannelType) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `${keyPath(currentIndex)}.channel_types[${currentIndex}]`,\n\t\t\t\t\toriginal: existingChannelType === undefined ? 'no channel type present' : getChannelTypePrettyName(existingChannelType),\n\t\t\t\t\texpected: getChannelTypePrettyName(channelType)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// If we went through less channel types than we previously had, report that\n\t\tif (index < existingChannelTypes!.length) {\n\t\t\tlet channelType: Exclude<APIApplicationCommandChannelOption['channel_types'], undefined>[number];\n\t\t\twhile ((channelType = existingChannelTypes![index]) !== undefined) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `${keyPath(index)}.channel_types[${index}]`,\n\t\t\t\t\texpected: 'no channel type present',\n\t\t\t\t\toriginal: getChannelTypePrettyName(channelType)\n\t\t\t\t};\n\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}