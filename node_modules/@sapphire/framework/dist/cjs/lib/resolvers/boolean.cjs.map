{"version":3,"sources":["../../../../src/lib/resolvers/boolean.ts"],"names":["Result","Identifiers"],"mappings":";;;;;;;AAGA,IAAM,aAAa,CAAC,GAAA,EAAK,QAAQ,GAAK,EAAA,GAAA,EAAK,OAAO,GAAG,CAAA;AACrD,IAAM,aAAa,CAAC,GAAA,EAAK,SAAS,GAAK,EAAA,GAAA,EAAK,MAAM,GAAG,CAAA;AAE9C,SAAS,cAAA,CACf,WACA,OACoD,EAAA;AACpD,EAAM,MAAA,OAAA,GAAU,UAAU,WAAY,EAAA;AAEtC,EAAI,IAAA,CAAC,GAAG,UAAA,EAAY,GAAI,OAAA,EAAS,MAAU,IAAA,EAAG,CAAA,CAAE,QAAS,CAAA,OAAO,CAAG,EAAA;AAClE,IAAO,OAAAA,aAAA,CAAO,GAAG,IAAI,CAAA;AAAA;AAGtB,EAAI,IAAA,CAAC,GAAG,UAAA,EAAY,GAAI,OAAA,EAAS,MAAU,IAAA,EAAG,CAAA,CAAE,QAAS,CAAA,OAAO,CAAG,EAAA;AAClE,IAAO,OAAAA,aAAA,CAAO,GAAG,KAAK,CAAA;AAAA;AAGvB,EAAO,OAAAA,aAAA,CAAO,GAAI,CAAAC,2BAAA,CAAY,oBAAoB,CAAA;AACnD;AAfgB,MAAA,CAAA,cAAA,EAAA,gBAAA,CAAA","file":"boolean.cjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nconst baseTruths = ['1', 'true', '+', 't', 'yes', 'y'] as const;\nconst baseFalses = ['0', 'false', '-', 'f', 'no', 'n'] as const;\n\nexport function resolveBoolean(\n\tparameter: string,\n\tcustoms?: { truths?: readonly string[]; falses?: readonly string[] }\n): Result<boolean, Identifiers.ArgumentBooleanError> {\n\tconst boolean = parameter.toLowerCase();\n\n\tif ([...baseTruths, ...(customs?.truths ?? [])].includes(boolean)) {\n\t\treturn Result.ok(true);\n\t}\n\n\tif ([...baseFalses, ...(customs?.falses ?? [])].includes(boolean)) {\n\t\treturn Result.ok(false);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentBooleanError);\n}\n"]}