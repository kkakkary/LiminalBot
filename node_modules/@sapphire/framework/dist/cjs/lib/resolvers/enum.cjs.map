{"version":3,"sources":["../../../../src/lib/resolvers/enum.ts"],"names":["Result","Identifiers"],"mappings":";;;;;;;AAGO,SAAS,WAAA,CACf,WACA,OACqF,EAAA;AACrF,EAAI,IAAA,CAAC,OAAS,EAAA,IAAA,EAAM,MAAQ,EAAA;AAC3B,IAAO,OAAAA,aAAA,CAAO,GAAI,CAAAC,2BAAA,CAAY,sBAAsB,CAAA;AAAA;AAGrD,EAAI,IAAA,CAAC,QAAQ,eAAmB,IAAA,CAAC,QAAQ,IAAK,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AAClE,IAAO,OAAAD,aAAA,CAAO,GAAI,CAAAC,2BAAA,CAAY,iBAAiB,CAAA;AAAA;AAGhD,EAAA,IAAI,OAAQ,CAAA,eAAA,IAAmB,CAAC,OAAA,CAAQ,KAAK,IAAK,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,WAAY,EAAA,KAAM,SAAU,CAAA,WAAA,EAAa,CAAG,EAAA;AACtG,IAAO,OAAAD,aAAA,CAAO,GAAI,CAAAC,2BAAA,CAAY,iBAAiB,CAAA;AAAA;AAGhD,EAAO,OAAAD,aAAA,CAAO,GAAG,SAAS,CAAA;AAC3B;AAjBgB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA","file":"enum.cjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveEnum(\n\tparameter: string,\n\toptions?: { enum?: string[]; caseInsensitive?: boolean }\n): Result<string, Identifiers.ArgumentEnumEmptyError | Identifiers.ArgumentEnumError> {\n\tif (!options?.enum?.length) {\n\t\treturn Result.err(Identifiers.ArgumentEnumEmptyError);\n\t}\n\n\tif (!options.caseInsensitive && !options.enum.includes(parameter)) {\n\t\treturn Result.err(Identifiers.ArgumentEnumError);\n\t}\n\n\tif (options.caseInsensitive && !options.enum.some((v) => v.toLowerCase() === parameter.toLowerCase())) {\n\t\treturn Result.err(Identifiers.ArgumentEnumError);\n\t}\n\n\treturn Result.ok(parameter);\n}\n"]}