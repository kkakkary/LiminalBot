{"version":3,"sources":["../../../../src/lib/precondition-resolvers/clientPermissions.ts"],"names":["PermissionsBitField","CommandPreConditions"],"mappings":";;;;;;;AAUO,SAAS,sDAAA,CACf,2BACA,0BACC,EAAA;AACD,EAAM,MAAA,WAAA,GAAc,IAAIA,8BAAA,CAAoB,yBAAyB,CAAA;AACrE,EAAI,IAAA,WAAA,CAAY,aAAa,EAAI,EAAA;AAChC,IAA2B,0BAAA,CAAA,MAAA,CAAO,EAAE,IAAM,EAAAC,8BAAA,CAAqB,mBAAmB,OAAS,EAAA,EAAE,WAAY,EAAA,EAAG,CAAA;AAAA;AAE9G;AARgB,MAAA,CAAA,sDAAA,EAAA,wDAAA,CAAA","file":"clientPermissions.cjs","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a\n * non-zero bitfield.\n * @param requiredClientPermissions The required client permissions.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRequiredClientPermissions(\n\trequiredClientPermissions: PermissionResolvable | undefined,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\tconst permissions = new PermissionsBitField(requiredClientPermissions);\n\tif (permissions.bitfield !== 0n) {\n\t\tpreconditionContainerArray.append({ name: CommandPreConditions.ClientPermissions, context: { permissions } });\n\t}\n}\n"]}