{"version":3,"sources":["../../../../src/lib/precondition-resolvers/userPermissions.ts"],"names":["PermissionsBitField","CommandPreConditions"],"mappings":";;;;;;;AAUO,SAAS,oDAAA,CACf,yBACA,0BACC,EAAA;AACD,EAAM,MAAA,WAAA,GAAc,IAAIA,8BAAA,CAAoB,uBAAuB,CAAA;AACnE,EAAI,IAAA,WAAA,CAAY,aAAa,EAAI,EAAA;AAChC,IAA2B,0BAAA,CAAA,MAAA,CAAO,EAAE,IAAM,EAAAC,8BAAA,CAAqB,iBAAiB,OAAS,EAAA,EAAE,WAAY,EAAA,EAAG,CAAA;AAAA;AAE5G;AARgB,MAAA,CAAA,oDAAA,EAAA,sDAAA,CAAA","file":"userPermissions.cjs","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `UserPermissions` precondition when {@link Command.Options.requiredUserPermissions} resolves to a\n * non-zero bitfield.\n * @param requiredUserPermissions The required user permissions.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRequiredUserPermissions(\n\trequiredUserPermissions: PermissionResolvable | undefined,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\tconst permissions = new PermissionsBitField(requiredUserPermissions);\n\tif (permissions.bitfield !== 0n) {\n\t\tpreconditionContainerArray.append({ name: CommandPreConditions.UserPermissions, context: { permissions } });\n\t}\n}\n"]}