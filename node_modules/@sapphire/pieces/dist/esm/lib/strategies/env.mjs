import { __name } from '../../chunk-KFLDEQ5J.mjs';
import { isNullish } from '@sapphire/utilities';

function checkProcessArgv(name) {
  return process.execArgv.some((arg) => arg.includes(name)) || //
  process.argv.some((arg) => arg.includes(name));
}
__name(checkProcessArgv, "checkProcessArgv");
function checkPreloadModules(name) {
  return "_preload_modules" in process && process._preload_modules.some((module) => module.includes(name));
}
__name(checkPreloadModules, "checkPreloadModules");
function checkEnvVariable(name, value) {
  return value ? process.env[name] === value : !isNullish(process.env[name]);
}
__name(checkEnvVariable, "checkEnvVariable");
var CanLoadTypeScriptFiles = (
  //
  // Deno
  Reflect.has(globalThis, "Deno") || //
  // Bun
  Reflect.has(globalThis, "Bun") || "bun" in process.versions || //
  // ts-node
  // > --require ts-node/register
  Symbol.for("ts-node.register.instance") in process || // > --loader ts-node/esm
  checkProcessArgv("ts-node/esm") || // > ts-node-dev
  !isNullish(process.env.TS_NODE_DEV) || //
  // @babel/node
  checkProcessArgv("babel-node") || //
  // vitest
  checkEnvVariable("VITEST", "true") || checkEnvVariable("VITEST_WORKER_ID") || //
  // jest
  checkEnvVariable("JEST_WORKER_ID") || //
  // swc
  checkPreloadModules("@swc/register") || //
  checkPreloadModules("@swc-node/register") || checkProcessArgv(".bin/swc-node") || //
  // tsm
  checkPreloadModules("tsm") || //
  // esbuild
  checkPreloadModules("esbuild-register") || //
  // tsx
  checkPreloadModules("tsx")
);

export { CanLoadTypeScriptFiles };
//# sourceMappingURL=env.mjs.map
//# sourceMappingURL=env.mjs.map