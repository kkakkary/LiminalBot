{"version":3,"sources":["../../../../src/lib/strategies/env.ts"],"names":[],"mappings":";;;AAEA,SAAS,iBAAiB,IAAc,EAAA;AACvC,EACC,OAAA,OAAA,CAAQ,SAAS,IAAK,CAAA,CAAC,QAAQ,GAAI,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA;AAAA,EACjD,OAAA,CAAQ,KAAK,IAAK,CAAA,CAAC,QAAQ,GAAI,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA;AAE/C;AALS,MAAA,CAAA,gBAAA,EAAA,kBAAA,CAAA;AAOT,SAAS,oBAAoB,IAAc,EAAA;AAC1C,EAAO,OAAA,kBAAA,IAAsB,OAAY,IAAA,OAAA,CAAQ,gBAA8B,CAAA,IAAA,CAAK,CAAC,MAAW,KAAA,MAAA,CAAO,QAAS,CAAA,IAAI,CAAC,CAAA;AACtH;AAFS,MAAA,CAAA,mBAAA,EAAA,qBAAA,CAAA;AAIT,SAAS,gBAAA,CAAiB,MAAc,KAAgB,EAAA;AACvD,EAAO,OAAA,KAAA,GAAQ,OAAQ,CAAA,GAAA,CAAI,IAAI,CAAA,KAAM,KAAQ,GAAA,CAAC,SAAU,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAI,CAAC,CAAA;AAC1E;AAFS,MAAA,CAAA,gBAAA,EAAA,kBAAA,CAAA;AAqBI,IAAA,sBAAA;AAAA;AAAA;AAAA,EAGZ,OAAA,CAAQ,GAAI,CAAA,UAAA,EAAY,MAAM,CAAA;AAAA;AAAA,EAG9B,QAAQ,GAAI,CAAA,UAAA,EAAY,KAAK,CAAA,IAC7B,SAAS,OAAQ,CAAA,QAAA;AAAA;AAAA;AAAA,EAIjB,MAAA,CAAO,GAAI,CAAA,2BAA2B,CAAK,IAAA,OAAA;AAAA,EAE3C,iBAAiB,aAAa,CAAA;AAAA,EAE9B,CAAC,SAAA,CAAU,OAAQ,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAAA,EAGlC,iBAAiB,YAAY,CAAA;AAAA;AAAA,EAG7B,gBAAiB,CAAA,QAAA,EAAU,MAAM,CAAA,IACjC,iBAAiB,kBAAkB,CAAA;AAAA;AAAA,EAGnC,iBAAiB,gBAAgB,CAAA;AAAA;AAAA,EAGjC,oBAAoB,eAAe,CAAA;AAAA,EACnC,mBAAoB,CAAA,oBAAoB,CACxC,IAAA,gBAAA,CAAiB,eAAe,CAAA;AAAA;AAAA,EAGhC,oBAAoB,KAAK,CAAA;AAAA;AAAA,EAGzB,oBAAoB,kBAAkB,CAAA;AAAA;AAAA,EAGtC,oBAAoB,KAAK;AAAA","file":"env.mjs","sourcesContent":["import { isNullish } from '@sapphire/utilities';\n\nfunction checkProcessArgv(name: string) {\n\treturn (\n\t\tprocess.execArgv.some((arg) => arg.includes(name)) || //\n\t\tprocess.argv.some((arg) => arg.includes(name))\n\t);\n}\n\nfunction checkPreloadModules(name: string) {\n\treturn '_preload_modules' in process && (process._preload_modules as string[]).some((module) => module.includes(name));\n}\n\nfunction checkEnvVariable(name: string, value?: string) {\n\treturn value ? process.env[name] === value : !isNullish(process.env[name]);\n}\n\n/**\n * Whether or not the current environment can load TypeScript files. These\n * conditions are based on the most common tools and runtimes that support\n * loading TypeScript files directly.\n *\n * - {@linkplain https://www.npmjs.com/package/ts-node | `ts-node`}\n * - {@linkplain https://www.npmjs.com/package/ts-node-dev | `ts-node-dev`}\n * - {@linkplain https://www.npmjs.com/package/@babel/node | `@babel/node`}\n * - {@linkplain https://www.npmjs.com/package/vitest | `vitest`}\n * - {@linkplain https://www.npmjs.com/package/jest | `jest`}\n * - {@linkplain https://www.npmjs.com/package/@swc/cli | `swc`}\n * - {@linkplain https://www.npmjs.com/package/tsm | `tsm`}\n * - {@linkplain https://www.npmjs.com/package/esbuild | `esbuild`}\n * - {@linkplain https://www.npmjs.com/package/tsx | `tsx`}\n * - {@linkplain https://deno.com | `Deno`}\n * - {@linkplain https://bun.sh | `Bun`}\n */\nexport const CanLoadTypeScriptFiles: boolean =\n\t//\n\t// Deno\n\tReflect.has(globalThis, 'Deno') ||\n\t//\n\t// Bun\n\tReflect.has(globalThis, 'Bun') ||\n\t'bun' in process.versions ||\n\t//\n\t// ts-node\n\t// > --require ts-node/register\n\tSymbol.for('ts-node.register.instance') in process ||\n\t// > --loader ts-node/esm\n\tcheckProcessArgv('ts-node/esm') ||\n\t// > ts-node-dev\n\t!isNullish(process.env.TS_NODE_DEV) ||\n\t//\n\t// @babel/node\n\tcheckProcessArgv('babel-node') ||\n\t//\n\t// vitest\n\tcheckEnvVariable('VITEST', 'true') ||\n\tcheckEnvVariable('VITEST_WORKER_ID') ||\n\t//\n\t// jest\n\tcheckEnvVariable('JEST_WORKER_ID') ||\n\t//\n\t// swc\n\tcheckPreloadModules('@swc/register') || //\n\tcheckPreloadModules('@swc-node/register') ||\n\tcheckProcessArgv('.bin/swc-node') ||\n\t//\n\t// tsm\n\tcheckPreloadModules('tsm') ||\n\t//\n\t// esbuild\n\tcheckPreloadModules('esbuild-register') ||\n\t//\n\t// tsx\n\tcheckPreloadModules('tsx');\n"]}