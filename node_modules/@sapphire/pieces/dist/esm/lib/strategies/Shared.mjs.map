{"version":3,"sources":["../../../../src/lib/strategies/Shared.ts"],"names":[],"mappings":";;;AAOO,SAAS,QAAQ,KAAuC,EAAA;AAC9D,EAAA,OAAO,OAAO,KAAA,KAAU,UAAc,IAAA,OAAO,MAAM,SAAc,KAAA,QAAA;AAClE;AAFgB,MAAA,CAAA,OAAA,EAAA,SAAA,CAAA;AAUT,SAAS,YAAA,CAAqC,OAAqB,IAAqB,EAAA;AAC9F,EAAA,IAAI,IAA4B,GAAA,KAAA;AAChC,EAAA,OAAO,SAAS,IAAM,EAAA;AACrB,IAAI,IAAA,IAAA,KAAS,MAAa,OAAA,IAAA;AAC1B,IAAO,IAAA,GAAA,MAAA,CAAO,eAAe,IAAI,CAAA;AAAA;AAGlC,EAAO,OAAA,KAAA;AACR;AARgB,MAAA,CAAA,YAAA,EAAA,cAAA,CAAA","file":"Shared.mjs","sourcesContent":["import type { AbstractCtor } from '@sapphire/utilities';\n\n/**\n * Determines whether or not a value is a class.\n * @param value The piece to be checked.\n * @private\n */\nexport function isClass(value: unknown): value is AbstractCtor {\n\treturn typeof value === 'function' && typeof value.prototype === 'object';\n}\n\n/**\n * Checks whether or not the value class extends the base class.\n * @param value The constructor to be checked against.\n * @param base The base constructor.\n * @private\n */\nexport function classExtends<T extends AbstractCtor>(value: AbstractCtor, base: T): value is T {\n\tlet ctor: AbstractCtor | null = value;\n\twhile (ctor !== null) {\n\t\tif (ctor === base) return true;\n\t\tctor = Object.getPrototypeOf(ctor);\n\t}\n\n\treturn false;\n}\n"]}