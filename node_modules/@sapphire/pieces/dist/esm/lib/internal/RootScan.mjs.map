{"version":3,"sources":["../../../../src/lib/internal/RootScan.ts"],"names":[],"mappings":";;;;AA4BA,IAAI,IAAwB,GAAA,IAAA;AAS5B,SAAS,eAAA,CAAgB,KAAa,YAAsB,EAAA;AAC3D,EAAA,OAAO,OAAQ,CAAA,IAAA,CAAK,GAAK,EAAA,YAAY,CAAC,CAAA;AACvC;AAFS,MAAA,CAAA,eAAA,EAAA,iBAAA,CAAA;AAIF,SAAS,WAAwB,GAAA;AACvC,EAAA,OAAQ,SAAS,aAAc,EAAA;AAChC;AAFgB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA;AAmCT,SAAS,aAA0B,GAAA;AACzC,EAAM,MAAA,GAAA,GAAM,QAAQ,GAAI,EAAA;AAExB,EAAI,IAAA,IAAA;AAEJ,EAAI,IAAA;AACH,IAAO,IAAA,GAAA,IAAA,CAAK,MAAM,YAAa,CAAA,IAAA,CAAK,KAAK,cAAc,CAAA,EAAG,MAAM,CAAC,CAAA;AAAA,WACzD,KAAO,EAAA;AACf,IAAA,MAAM,iBAAoB,GAAA,UAAA,CAAW,IAAK,CAAA,GAAA,EAAK,WAAW,CAAC,CAAA;AAC3D,IAAA,MAAM,gBAAmB,GAAA,UAAA,CAAW,IAAK,CAAA,GAAA,EAAK,aAAa,CAAC,CAAA;AAC5D,IAAA,OAAO,iBAAqB,IAAA,gBAAA,GAAmB,EAAE,IAAA,EAAM,GAAK,EAAA,IAAA,EAAM,KAAM,EAAA,GAAI,EAAE,IAAA,EAAM,GAAK,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA;AAG3G,EAAA,MAAM,EAAE,IAAM,EAAA,WAAA,EAAa,QAAQ,aAAe,EAAA,IAAA,EAAM,aAAgB,GAAA,IAAA;AAExE,EAAM,MAAA,cAAA,GAAiB,aAAa,WAAY,EAAA;AAEhD,EAAA,IAAI,mBAAmB,UAAY,EAAA;AAClC,IAAI,IAAA,WAAA,SAAoB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,WAAW,CAAG,EAAA,IAAA,EAAM,UAAW,EAAA;AACpF,IAAI,IAAA,aAAA,SAAsB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,aAAa,CAAG,EAAA,IAAA,EAAM,UAAW,EAAA;AACxF,IAAA,OAAO,EAAE,IAAA,EAAM,GAAK,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA;AAGtC,EAAA,IAAI,mBAAmB,QAAU,EAAA;AAChC,IAAI,IAAA,WAAA,SAAoB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,WAAW,CAAG,EAAA,IAAA,EAAM,KAAM,EAAA;AAC/E,IAAI,IAAA,aAAA,SAAsB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,aAAa,CAAG,EAAA,IAAA,EAAM,KAAM,EAAA;AACnF,IAAA,OAAO,EAAE,IAAA,EAAM,GAAK,EAAA,IAAA,EAAM,KAAM,EAAA;AAAA;AAGjC,EAAI,IAAA,WAAA,SAAoB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,WAAW,CAAG,EAAA,IAAA,EAAM,UAAW,EAAA;AACpF,EAAI,IAAA,aAAA,SAAsB,EAAE,IAAA,EAAM,gBAAgB,GAAK,EAAA,aAAa,CAAG,EAAA,IAAA,EAAM,KAAM,EAAA;AAEnF,EAAA,OAAO,EAAE,IAAA,EAAM,GAAK,EAAA,IAAA,EAAM,UAAW,EAAA;AACtC;AAjCgB,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA","file":"RootScan.mjs","sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\n\n/**\n * Represents a partial package.json object.\n */\ntype PartialPackageJson = Partial<{\n\tmain: string;\n\tmodule: string;\n\ttype: 'commonjs' | 'module';\n}>;\n\n/**\n * Represents the root data.\n */\nexport interface RootData {\n\t/**\n\t * The root directory.\n\t */\n\troot: string;\n\n\t/**\n\t * The type of the module system used.\n\t * It can be either 'ESM' or 'CommonJS'.\n\t */\n\ttype: 'ESM' | 'CommonJS';\n}\n\nlet data: RootData | null = null;\n\n/**\n * Returns the directory name of a given path by joining the current working directory (cwd) with the joinable path.\n * @private\n * @param cwd - The current working directory.\n * @param joinablePath - The path to be joined with the cwd.\n * @returns The directory name of the joined path.\n */\nfunction dirnameWithPath(cwd: string, joinablePath: string) {\n\treturn dirname(join(cwd, joinablePath));\n}\n\nexport function getRootData(): RootData {\n\treturn (data ??= parseRootData());\n}\n\n/**\n * Retrieves the root data of the project.\n *\n * This function reads the `package.json` file in the current working directory and determines the root path and type\n * of the project.\n *\n * - If the `package.json` file is not found or cannot be parsed, it assumes the project is using CommonJS and\n * the current working directory is used as the root\n *\n * - If the project `type` is specified as `\"commonjs\"` or `\"module\"` in the `package.json`, it uses the corresponding\n * `main` or `module` file path as the root.\n *\n *   - If there is no `main` or `module` then it uses the current working directory as the root, while retaining the\n *     matching `CommonJS` or `ESM` based on the `type`\n *\n * - If the main or module file path is not specified, it uses the current working directory as the root.\n *\n * The following table shows how different situations resolve to different root data\n *\n * | fields                   | resolved as |\n * |--------------------------|-------------|\n * | type=commonjs && main    | CommonJS    |\n * | type=commonjs && module  | CommonJS    |\n * | type=module && main      | ESM         |\n * | type=module && module    | ESM         |\n * | type=undefined && main   | CommonJS    |\n * | type=undefined && module | ESM         |\n * | no package.json on cwd   | CommonJS    |\n *\n * @returns The root data object containing the root path and the type of the project.\n */\nexport function parseRootData(): RootData {\n\tconst cwd = process.cwd();\n\n\tlet file: PartialPackageJson | undefined;\n\n\ttry {\n\t\tfile = JSON.parse(readFileSync(join(cwd, 'package.json'), 'utf8')) as PartialPackageJson;\n\t} catch (error) {\n\t\tconst hasDenoConfigFile = existsSync(join(cwd, 'deno.json'));\n\t\tconst hasBunConfigFile = existsSync(join(cwd, 'bunfig.toml'));\n\t\treturn hasDenoConfigFile || hasBunConfigFile ? { root: cwd, type: 'ESM' } : { root: cwd, type: 'CommonJS' };\n\t}\n\n\tconst { main: packageMain, module: packageModule, type: packageType } = file;\n\n\tconst lowerCasedType = packageType?.toLowerCase() as PartialPackageJson['type'];\n\n\tif (lowerCasedType === 'commonjs') {\n\t\tif (packageMain) return { root: dirnameWithPath(cwd, packageMain), type: 'CommonJS' };\n\t\tif (packageModule) return { root: dirnameWithPath(cwd, packageModule), type: 'CommonJS' };\n\t\treturn { root: cwd, type: 'CommonJS' };\n\t}\n\n\tif (lowerCasedType === 'module') {\n\t\tif (packageMain) return { root: dirnameWithPath(cwd, packageMain), type: 'ESM' };\n\t\tif (packageModule) return { root: dirnameWithPath(cwd, packageModule), type: 'ESM' };\n\t\treturn { root: cwd, type: 'ESM' };\n\t}\n\n\tif (packageMain) return { root: dirnameWithPath(cwd, packageMain), type: 'CommonJS' };\n\tif (packageModule) return { root: dirnameWithPath(cwd, packageModule), type: 'ESM' };\n\n\treturn { root: cwd, type: 'CommonJS' };\n}\n"]}