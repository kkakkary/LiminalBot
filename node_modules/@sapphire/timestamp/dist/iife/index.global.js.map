{"version":3,"sources":["../../src/lib/constants.ts","../../src/lib/Timestamp.ts"],"names":["Time"],"mappings":"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","file":"index.global.js","sourcesContent":["export enum Time {\n\tNanosecond = 1 / 1_000_000,\n\tMicrosecond = 1 / 1000,\n\tMillisecond = 1,\n\tSecond = 1000,\n\tMinute = Second * 60,\n\tHour = Minute * 60,\n\tDay = Hour * 24,\n\tWeek = Day * 7,\n\tMonth = Day * (365 / 12),\n\tYear = Day * 365\n}\n\nexport const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const tokens = new Map<string, number>([\n\t['Y', 4],\n\t['Q', 1],\n\t['M', 4],\n\t['D', 4],\n\t['d', 4],\n\t['X', 1],\n\t['x', 1],\n\t['H', 2],\n\t['h', 2],\n\t['a', 1],\n\t['A', 1],\n\t['m', 2],\n\t['s', 2],\n\t['S', 3],\n\t['Z', 2],\n\t['l', 4],\n\t['L', 4],\n\t['T', 1],\n\t['t', 1]\n]);\n","import { days, months, Time, tokens } from './constants';\n\ninterface TokenResolver {\n\t(time: Date): string;\n}\n\nconst tokenResolvers = new Map<string, TokenResolver>([\n\t// Dates\n\t['Y', (time) => String(time.getFullYear()).slice(2)],\n\t['YY', (time) => String(time.getFullYear()).slice(2)],\n\t['YYY', (time) => String(time.getFullYear())],\n\t['YYYY', (time) => String(time.getFullYear())],\n\t['Q', (time) => String((time.getMonth() + 1) / 3)],\n\t['M', (time) => String(time.getMonth() + 1)],\n\t['MM', (time) => String(time.getMonth() + 1).padStart(2, '0')],\n\t['MMM', (time) => months[time.getMonth()]],\n\t['MMMM', (time) => months[time.getMonth()]],\n\t['D', (time) => String(time.getDate())],\n\t['DD', (time) => String(time.getDate()).padStart(2, '0')],\n\t['DDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t['DDDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t[\n\t\t'd',\n\t\t(time) => {\n\t\t\tconst day = String(time.getDate());\n\t\t\tif (day !== '11' && day.endsWith('1')) return `${day}st`;\n\t\t\tif (day !== '12' && day.endsWith('2')) return `${day}nd`;\n\t\t\tif (day !== '13' && day.endsWith('3')) return `${day}rd`;\n\t\t\treturn `${day}th`;\n\t\t}\n\t],\n\t['dd', (time) => days[time.getDay()].slice(0, 2)],\n\t['ddd', (time) => days[time.getDay()].slice(0, 3)],\n\t['dddd', (time) => days[time.getDay()]],\n\t['X', (time) => String(time.valueOf() / Time.Second)],\n\t['x', (time) => String(time.valueOf())],\n\n\t// Locales\n\t['H', (time) => String(time.getHours())],\n\t['HH', (time) => String(time.getHours()).padStart(2, '0')],\n\t['h', (time) => String(time.getHours() % 12 || 12)],\n\t['hh', (time) => String(time.getHours() % 12 || 12).padStart(2, '0')],\n\t['a', (time) => (time.getHours() < 12 ? 'am' : 'pm')],\n\t['A', (time) => (time.getHours() < 12 ? 'AM' : 'PM')],\n\t['m', (time) => String(time.getMinutes())],\n\t['mm', (time) => String(time.getMinutes()).padStart(2, '0')],\n\t['s', (time) => String(time.getSeconds())],\n\t['ss', (time) => String(time.getSeconds()).padStart(2, '0')],\n\t['S', (time) => String(time.getMilliseconds())],\n\t['SS', (time) => String(time.getMilliseconds()).padStart(2, '0')],\n\t['SSS', (time) => String(time.getMilliseconds()).padStart(3, '0')],\n\t['T', (time) => `${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`],\n\t[\n\t\t't',\n\t\t(time) =>\n\t\t\t`${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')}:${String(time.getSeconds()).padStart(2, '0')} ${\n\t\t\t\ttime.getHours() < 12 ? 'am' : 'pm'\n\t\t\t}`\n\t],\n\t['L', (time) => `${String(time.getMonth() + 1).padStart(2, '0')}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['l', (time) => `${String(time.getMonth() + 1)}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['LL', (time) => `${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t['ll', (time) => `${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t[\n\t\t'LLL',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'lll',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'LLLL',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()]}, ${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'llll',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()].slice(0, 3)} ${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(\n\t\t\t\ttime.getFullYear()\n\t\t\t)} ${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'Z',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t],\n\t[\n\t\t'ZZ',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t]\n]);\n/* eslint-enable max-len */\n\nexport type TimeResolvable = Date | number | string;\n\nexport interface TimestampTemplateEntry {\n\ttype: string;\n\tcontent: string | null;\n}\n\n/**\n * Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.\n */\nexport class Timestamp {\n\t/**\n\t * The raw pattern\n\t * @since 1.0.0\n\t */\n\tpublic pattern: string;\n\n\t/**\n\t * @since 1.0.0\n\t */\n\tprivate template: TimestampTemplateEntry[];\n\n\t/**\n\t * Starts a new Timestamp and parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display\n\t */\n\tpublic display(time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(this.template, time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display in utc\n\t */\n\tpublic displayUTC(time?: TimeResolvable): string {\n\t\treturn Timestamp.display(this.template, Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Edits the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The new pattern for this instance\n\t * @chainable\n\t */\n\tpublic edit(pattern: string): this {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Defines the toString behavior of Timestamp.\n\t */\n\tpublic toString(): string {\n\t\treturn this.display();\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayUTCArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Creates a UTC Date object to work with.\n\t * @since 1.0.0\n\t * @param time The date to convert to utc\n\t */\n\tpublic static utc(time: Date | number | string = new Date()): Date {\n\t\ttime = Timestamp.resolveDate(time);\n\t\treturn new Date(time.valueOf() + time.getTimezoneOffset() * 60000);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param template The pattern to parse\n\t * @param time The time to display\n\t */\n\tprivate static display(template: TimestampTemplateEntry[], time: Date | number | string): string {\n\t\tlet output = '';\n\t\tconst parsedTime = Timestamp.resolveDate(time);\n\t\tfor (const { content, type } of template) output += content || tokenResolvers.get(type)!(parsedTime);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): TimestampTemplateEntry[] {\n\t\tconst template: TimestampTemplateEntry[] = [];\n\t\tfor (let i = 0; i < pattern.length; i++) {\n\t\t\tlet current = '';\n\t\t\tconst currentChar = pattern[i];\n\t\t\tconst tokenMax = tokens.get(currentChar);\n\t\t\tif (typeof tokenMax === 'number') {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (pattern[i + 1] === currentChar && current.length < tokenMax) current += pattern[++i];\n\t\t\t\ttemplate.push({ type: current, content: null });\n\t\t\t} else if (currentChar === '[') {\n\t\t\t\twhile (i + 1 < pattern.length && pattern[i + 1] !== ']') current += pattern[++i];\n\t\t\t\ti++;\n\t\t\t\ttemplate.push({ type: 'literal', content: current || '[' });\n\t\t\t} else {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (i + 1 < pattern.length && !tokens.has(pattern[i + 1]) && pattern[i + 1] !== '[') current += pattern[++i];\n\t\t\t\ttemplate.push({ type: 'literal', content: current });\n\t\t\t}\n\t\t}\n\n\t\treturn template;\n\t}\n\n\t/**\n\t * Resolves a date.\n\t * @since 1.0.0\n\t * @param time The time to parse\n\t */\n\tprivate static resolveDate(time: TimeResolvable): Date {\n\t\treturn time instanceof Date ? time : new Date(time);\n\t}\n}\n"]}