{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","file":"index.global.js","sourcesContent":["/**\n * Stopwatch class, uses native node to replicate/extend performance-now dependency.\n */\nexport class Stopwatch {\n\t/**\n\t * The number of digits to appear after the decimal point when returning the friendly duration.\n\t */\n\tpublic digits: number;\n\n\t/**\n\t * The start time of this stopwatch\n\t */\n\t#start: number;\n\n\t/**\n\t * The end time of this stopwatch\n\t */\n\t#end: number | null;\n\n\t/**\n\t * Starts a new stopwatch\n\t */\n\tpublic constructor(digits = 2) {\n\t\tthis.digits = digits;\n\t\tthis.#start = performance.now();\n\t\tthis.#end = null;\n\t}\n\n\t/**\n\t * The duration of this stopwatch since start or start to end if this stopwatch has stopped.\n\t */\n\tpublic get duration(): number {\n\t\treturn this.#end ? this.#end - this.#start : performance.now() - this.#start;\n\t}\n\n\t/**\n\t * If the stopwatch is running or not.\n\t */\n\tpublic get running(): boolean {\n\t\treturn Boolean(!this.#end);\n\t}\n\n\t/**\n\t * Restarts the stopwatch (Returns a running state)\n\t */\n\tpublic restart(): this {\n\t\tthis.#start = performance.now();\n\t\tthis.#end = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the Stopwatch to 0 duration (Returns a stopped state)\n\t */\n\tpublic reset(): this {\n\t\tthis.#start = performance.now();\n\t\tthis.#end = this.#start;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Starts the Stopwatch\n\t */\n\tpublic start(): this {\n\t\tif (!this.running) {\n\t\t\tthis.#start = performance.now() - this.duration;\n\t\t\tthis.#end = null;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stops the Stopwatch, freezing the duration\n\t */\n\tpublic stop(): this {\n\t\tif (this.running) this.#end = performance.now();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Defines toString behavior\n\t */\n\tpublic toString(): string {\n\t\tconst time = this.duration;\n\t\tif (time >= 1000) return `${(time / 1000).toFixed(this.digits)}s`;\n\t\tif (time >= 1) return `${time.toFixed(this.digits)}ms`;\n\t\treturn `${(time * 1000).toFixed(this.digits)}Î¼s`;\n\t}\n}\n"]}